<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Backup Management - HIJINETWORK</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .backup-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }
        .backup-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .backup-status {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        .status-completed {
            background-color: #d1edff;
            color: #0c63e4;
        }
        .status-failed {
            background-color: #f8d7da;
            color: #842029;
        }
        .status-in-progress {
            background-color: #fff3cd;
            color: #664d03;
        }
        .backup-size {
            font-size: 0.875rem;
            color: #6c757d;
        }
        .metric-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
        }
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #495057;
        }
        .metric-label {
            color: #6c757d;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .action-btn {
            margin-right: 0.5rem;
        }
        .backup-timeline {
            position: relative;
            padding-left: 2rem;
        }
        .backup-timeline::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: #dee2e6;
        }
        .timeline-item {
            position: relative;
            margin-bottom: 1.5rem;
        }
        .timeline-item::before {
            content: '';
            position: absolute;
            left: -2.5rem;
            top: 0.5rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #0d6efd;
            border: 2px solid white;
        }
        .health-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 0.5rem;
        }
        .health-good {
            background-color: #28a745;
        }
        .health-warning {
            background-color: #ffc107;
        }
        .health-error {
            background-color: #dc3545;
        }
    </style>
</head>
<body>
    <!-- Include header -->
    <%- include('../partials/header') %>

    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3 mb-0">Backup Management</h1>
                    <div>
                        <button class="btn btn-primary" onclick="createBackup()">
                            <i class="bi bi-plus-circle me-1"></i> Create Backup
                        </button>
                        <button class="btn btn-outline-secondary" onclick="refreshBackups()">
                            <i class="bi bi-arrow-clockwise me-1"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="metric-card">
                    <div class="metric-value" id="totalBackups"><%= stats.totalBackups %></div>
                    <div class="metric-label">Total Backups</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <div class="metric-value" id="totalSize"><%= formatBytes(stats.totalSize) %></div>
                    <div class="metric-label">Total Size</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <div class="metric-value" id="successfulBackups"><%= stats.successfulBackups %></div>
                    <div class="metric-label">Successful</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <div class="metric-value" id="retentionDays"><%= stats.retentionDays %></div>
                    <div class="metric-label">Retention Days</div>
                </div>
            </div>
        </div>

        <!-- System Health -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">System Health</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="d-flex align-items-center">
                                    <span class="health-indicator health-good"></span>
                                    <span>Backup Storage</span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="d-flex align-items-center">
                                    <span class="health-indicator health-good"></span>
                                    <span>Database Connection</span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="d-flex align-items-center">
                                    <span class="health-indicator health-good"></span>
                                    <span>Schedule Service</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-primary" onclick="testConfiguration()">
                                <i class="bi bi-gear me-1"></i> Test Configuration
                            </button>
                            <button class="btn btn-outline-warning" onclick="cleanupBackups()">
                                <i class="bi bi-trash me-1"></i> Cleanup Old Backups
                            </button>
                            <button class="btn btn-outline-info" onclick="showSettings()">
                                <i class="bi bi-sliders me-1"></i> Settings
                            </button>
                            <button class="btn btn-outline-secondary" onclick="exportBackupHistory()">
                                <i class="bi bi-download me-1"></i> Export History
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Backup List -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Backup History</h5>
                            <div class="d-flex align-items-center">
                                <input type="text" class="form-control form-control-sm me-2" placeholder="Search backups..." id="searchInput" onkeyup="filterBackups()">
                                <select class="form-select form-select-sm" id="filterType" onchange="filterBackups()">
                                    <option value="">All Types</option>
                                    <option value="manual">Manual</option>
                                    <option value="scheduled">Scheduled</option>
                                    <option value="pre-update">Pre-update</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="backupsList">
                            <% if (backups.length === 0) { %>
                                <div class="text-center py-5">
                                    <i class="bi bi-inbox display-1 text-muted"></i>
                                    <h5 class="text-muted mt-3">No backups found</h5>
                                    <p class="text-muted">Create your first backup to get started</p>
                                    <button class="btn btn-primary" onclick="createBackup()">
                                        <i class="bi bi-plus-circle me-1"></i> Create Backup
                                    </button>
                                </div>
                            <% } else { %>
                                <% backups.forEach(function(backup) { %>
                                    <div class="backup-card" data-backup-id="<%= backup.id %>" data-backup-type="<%= backup.type %>">
                                        <div class="row align-items-center">
                                            <div class="col-md-4">
                                                <div class="d-flex align-items-center">
                                                    <div>
                                                        <h6 class="mb-1"><%= backup.id %></h6>
                                                        <small class="text-muted">
                                                            <%= formatDate(backup.timestamp) %>
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <span class="backup-status status-<%= backup.status %>">
                                                    <%= backup.status.replace('-', ' ') %>
                                                </span>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="backup-size">
                                                    <i class="bi bi-hdd me-1"></i>
                                                    <%= formatBytes(backup.size) %>
                                                    <% if (backup.compressedSize) { %>
                                                        <span class="text-muted">(<%= formatBytes(backup.compressedSize) %>)</span>
                                                    <% } %>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <small class="text-muted">
                                                    <%= backup.type %>
                                                    <br>
                                                    <%= backup.components %> components
                                                </small>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="text-end">
                                                    <button class="btn btn-sm btn-outline-primary action-btn" onclick="viewBackupDetails('<%= backup.id %>')" title="View Details">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <% if (backup.status === 'completed') { %>
                                                        <button class="btn btn-sm btn-outline-success action-btn" onclick="downloadBackup('<%= backup.id %>')" title="Download">
                                                            <i class="bi bi-download"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-warning action-btn" onclick="restoreBackup('<%= backup.id %>')" title="Restore">
                                                            <i class="bi bi-arrow-repeat"></i>
                                                        </button>
                                                    <% } %>
                                                    <button class="btn btn-sm btn-outline-danger action-btn" onclick="deleteBackup('<%= backup.id %>')" title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Backup Modal -->
    <div class="modal fade" id="createBackupModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Backup</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createBackupForm">
                        <div class="mb-3">
                            <label for="backupType" class="form-label">Backup Type</label>
                            <select class="form-select" id="backupType" name="type" required>
                                <option value="manual">Manual Backup</option>
                                <option value="scheduled">Scheduled Backup</option>
                                <option value="pre-update">Pre-update Backup</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="backupDescription" class="form-label">Description (Optional)</label>
                            <textarea class="form-control" id="backupDescription" name="description" rows="3" placeholder="Enter backup description..."></textarea>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeLogs" name="includeLogs" checked>
                                <label class="form-check-label" for="includeLogs">
                                    Include log files
                                </label>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeSSL" name="includeSSL" checked>
                                <label class="form-check-label" for="includeSSL">
                                    Include SSL certificates
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitCreateBackup()">
                        <i class="bi bi-plus-circle me-1"></i> Create Backup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Restore Backup Modal -->
    <div class="modal fade" id="restoreBackupModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Restore from Backup</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> Restoring from backup will overwrite current data. This action cannot be undone.
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Backup ID: <strong id="restoreBackupId"></strong></label>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Restore Options</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="restoreDatabase" name="restoreDatabase" checked>
                            <label class="form-check-label" for="restoreDatabase">
                                Restore Database
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="restoreApplication" name="restoreApplication" checked>
                            <label class="form-check-label" for="restoreApplication">
                                Restore Application Files
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="restoreConfiguration" name="restoreConfiguration" checked>
                            <label class="form-check-label" for="restoreConfiguration">
                                Restore Configuration
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="restoreSSL" name="restoreSSL" checked>
                            <label class="form-check-label" for="restoreSSL">
                                Restore SSL Certificates
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="confirmRestore" name="confirmRestore">
                            <label class="form-check-label" for="confirmRestore">
                                I understand that this action will overwrite current data
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-warning" onclick="submitRestoreBackup()">
                        <i class="bi bi-arrow-repeat me-1"></i> Restore Backup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Backup Details Modal -->
    <div class="modal fade" id="backupDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Backup Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="backupDetailsContent">
                        <!-- Backup details will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Include footer -->
    <%- include('../partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Utility functions
        function formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        function showLoading(element) {
            element.disabled = true;
            element.innerHTML = '<i class="bi bi-hourglass-split me-1"></i> Loading...';
        }

        function hideLoading(element, originalContent) {
            element.disabled = false;
            element.innerHTML = originalContent;
        }

        function showToast(message, type = 'success') {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            toastContainer.innerHTML = toastHtml;
            document.body.appendChild(toastContainer);

            const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
            toast.show();

            setTimeout(() => {
                toastContainer.remove();
            }, 5000);
        }

        // Backup management functions
        async function createBackup() {
            const modal = new bootstrap.Modal(document.getElementById('createBackupModal'));
            modal.show();
        }

        async function submitCreateBackup() {
            const form = document.getElementById('createBackupForm');
            const formData = new FormData(form);
            const button = form.querySelector('button[type="button"]');
            const originalContent = button.innerHTML;

            showLoading(button);

            try {
                const response = await fetch('/api/backups', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type: formData.get('type'),
                        description: formData.get('description')
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Backup created successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createBackupModal')).hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(result.message || 'Failed to create backup', 'danger');
                }
            } catch (error) {
                showToast('Error creating backup: ' + error.message, 'danger');
            } finally {
                hideLoading(button, originalContent);
            }
        }

        async function viewBackupDetails(backupId) {
            const modal = new bootstrap.Modal(document.getElementById('backupDetailsModal'));
            const content = document.getElementById('backupDetailsContent');

            content.innerHTML = '<div class="text-center"><i class="bi bi-hourglass-split"></i> Loading...</div>';
            modal.show();

            try {
                const response = await fetch(`/api/backups/${backupId}`);
                const result = await response.json();

                if (result.success) {
                    const backup = result.data;
                    content.innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Backup Information</h6>
                                <table class="table table-sm">
                                    <tr><td>ID:</td><td><strong>${backup.id}</strong></td></tr>
                                    <tr><td>Type:</td><td>${backup.type}</td></tr>
                                    <tr><td>Timestamp:</td><td>${formatDate(backup.timestamp)}</td></tr>
                                    <tr><td>Status:</td><td><span class="backup-status status-${backup.status}">${backup.status}</span></td></tr>
                                    <tr><td>Version:</td><td>${backup.version || 'N/A'}</td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6>Size Information</h6>
                                <table class="table table-sm">
                                    <tr><td>Original Size:</td><td>${formatBytes(backup.size)}</td></tr>
                                    <tr><td>Compressed Size:</td><td>${backup.compressedSize ? formatBytes(backup.compressedSize) : 'N/A'}</td></tr>
                                    <tr><td>Compression Ratio:</td><td>${backup.compressionRatio || 'N/A'}</td></tr>
                                    <tr><td>Components:</td><td>${backup.components.length}</td></tr>
                                    <tr><td>Checksum:</td><td><small class="text-muted">${backup.checksum || 'N/A'}</small></td></tr>
                                </table>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Components</h6>
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Type</th>
                                                <th>Size</th>
                                                <th>Files</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${backup.components.map(component => `
                                                <tr>
                                                    <td>${component.name}</td>
                                                    <td>${component.type}</td>
                                                    <td>${formatBytes(component.size)}</td>
                                                    <td>${component.files.length}</td>
                                                    <td><span class="backup-status status-${component.status}">${component.status}</span></td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        ${backup.error ? `
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="alert alert-danger">
                                    <h6>Error Information</h6>
                                    <p class="mb-0">${backup.error}</p>
                                </div>
                            </div>
                        </div>
                        ` : ''}
                    `;
                } else {
                    content.innerHTML = `<div class="alert alert-danger">Failed to load backup details: ${result.message}</div>`;
                }
            } catch (error) {
                content.innerHTML = `<div class="alert alert-danger">Error loading backup details: ${error.message}</div>`;
            }
        }

        async function restoreBackup(backupId) {
            document.getElementById('restoreBackupId').textContent = backupId;
            const modal = new bootstrap.Modal(document.getElementById('restoreBackupModal'));
            modal.show();
        }

        async function submitRestoreBackup() {
            const backupId = document.getElementById('restoreBackupId').textContent;
            const confirmRestore = document.getElementById('confirmRestore').checked;
            const button = document.querySelector('#restoreBackupModal .btn-warning');
            const originalContent = button.innerHTML;

            if (!confirmRestore) {
                showToast('Please confirm that you understand the risks', 'warning');
                return;
            }

            showLoading(button);

            try {
                const response = await fetch(`/api/backups/${backupId}/restore`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        confirmed: true,
                        database: document.getElementById('restoreDatabase').checked,
                        application: document.getElementById('restoreApplication').checked,
                        configuration: document.getElementById('restoreConfiguration').checked,
                        ssl: document.getElementById('restoreSSL').checked
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Backup restoration completed successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('restoreBackupModal')).hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(result.message || 'Failed to restore backup', 'danger');
                }
            } catch (error) {
                showToast('Error restoring backup: ' + error.message, 'danger');
            } finally {
                hideLoading(button, originalContent);
            }
        }

        async function deleteBackup(backupId) {
            if (!confirm('Are you sure you want to delete this backup? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/api/backups/${backupId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Backup deleted successfully', 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(result.message || 'Failed to delete backup', 'danger');
                }
            } catch (error) {
                showToast('Error deleting backup: ' + error.message, 'danger');
            }
        }

        async function downloadBackup(backupId) {
            try {
                window.location.href = `/api/backups/${backupId}/download`;
            } catch (error) {
                showToast('Error downloading backup: ' + error.message, 'danger');
            }
        }

        async function testConfiguration() {
            try {
                const response = await fetch('/api/backups/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ testType: 'connection' })
                });

                const result = await response.json();

                if (result.success) {
                    const health = result.data.overallHealth;
                    const recommendations = result.data.recommendations;

                    let message = `Configuration test completed: ${health}% health`;
                    if (recommendations.length > 0) {
                        message += '\\nRecommendations:\\n' + recommendations.join('\\n');
                    }

                    showToast(message, health > 80 ? 'success' : health > 50 ? 'warning' : 'danger');
                } else {
                    showToast(result.message || 'Configuration test failed', 'danger');
                }
            } catch (error) {
                showToast('Error testing configuration: ' + error.message, 'danger');
            }
        }

        async function cleanupBackups() {
            if (!confirm('Are you sure you want to cleanup old backups?')) {
                return;
            }

            try {
                showToast('Cleanup feature not implemented yet', 'info');
            } catch (error) {
                showToast('Error cleaning up backups: ' + error.message, 'danger');
            }
        }

        function showSettings() {
            showToast('Settings feature not implemented yet', 'info');
        }

        function exportBackupHistory() {
            showToast('Export feature not implemented yet', 'info');
        }

        async function refreshBackups() {
            location.reload();
        }

        function filterBackups() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filterType = document.getElementById('filterType').value;
            const backupCards = document.querySelectorAll('.backup-card');

            backupCards.forEach(card => {
                const backupId = card.dataset.backupId.toLowerCase();
                const backupType = card.dataset.backupType;

                const matchesSearch = backupId.includes(searchTerm);
                const matchesType = !filterType || backupType === filterType;

                card.style.display = matchesSearch && matchesType ? 'block' : 'none';
            });
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-refresh backups list every 30 seconds
            setInterval(() => {
                const currentUrl = window.location.pathname;
                if (currentUrl === '/backup') {
                    refreshBackups();
                }
            }, 30000);
        });
    </script>
</body>
</html>