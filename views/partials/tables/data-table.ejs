<%-
  /**
   * Shadcn-style Data Table Component
   * Variables:
   * - headers: Array of column headers [{text: string, key: string, sortable: boolean, class: string}]
   * - data: Array of data objects
   * - searchable: Enable search functionality (boolean, default: false)
   * - filterable: Enable filter functionality (boolean, default: false)
   * - pagination: Enable pagination (boolean, default: false)
   * - pageSize: Items per page (number, default: 10)
   * - sortable: Enable column sorting (boolean, default: false)
   * - selectable: Enable row selection (boolean, default: false)
   * - loading: Show loading state (boolean, default: false)
   * - empty: Empty state message (string, default: 'No data available')
   * - class: Additional CSS classes (string, optional)
   * - tableClass: Additional table CSS classes (string, optional)
   * - id: Table ID (string, required)
   * - rowClass: Function to determine row class (function, optional)
   * - cellClass: Function to determine cell class (function, optional)
   * - actionButtons: Array of action buttons [{text: string, onclick: string, class: string, icon: string}]
   * - bulkActions: Array of bulk actions for selected rows
   */

  // Set defaults
  const id = locals.id || 'data-table-' + Math.random().toString(36).substr(2, 9);
  const searchable = locals.searchable === true;
  const filterable = locals.filterable === true;
  const pagination = locals.pagination === true;
  const sortable = locals.sortable === true;
  const selectable = locals.selectable === true;
  const loading = locals.loading === true;
  const pageSize = locals.pageSize || 10;
  const empty = locals.empty || 'No data available';
  const headers = locals.headers || [];
  const data = locals.data || [];
  const actionButtons = locals.actionButtons || [];
  const bulkActions = locals.bulkActions || [];
  const currentPage = locals.currentPage || 1;
  const totalPages = locals.totalPages || Math.ceil(data.length / pageSize);
  const totalItems = locals.totalItems || data.length;

  // Calculate paginated data
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = pagination ? data.slice(startIndex, endIndex) : data;
%>

<div class="space-y-4 <%= locals.class || '' %>">
  <!-- Search and Filters -->
  <% if (searchable || filterable || bulkActions.length > 0) { %>
    <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        <% if (searchable) { %>
          <div class="relative max-w-sm">
            <input
              type="text"
              id="<%= id %>-search"
              placeholder="Search..."
              class="w-full h-10 pl-10 pr-4 text-sm bg-slate-900 border border-slate-700 rounded-lg text-white placeholder-slate-400 focus:border-blue-500 focus:ring-blue-500 focus:outline-none focus:ring-2"
            >
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-4 w-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
          </div>
        <% } %>

        <% if (filterable) { %>
          <select
            id="<%= id %>-filter"
            class="h-10 px-4 text-sm bg-slate-900 border border-slate-700 rounded-lg text-white focus:border-blue-500 focus:ring-blue-500 focus:outline-none focus:ring-2"
          >
            <option value="">All Categories</option>
          </select>
        <% } %>
      </div>

      <% if (selectable && bulkActions.length > 0) { %>
        <div class="flex gap-2">
          <% bulkActions.forEach((action, index) => { %>
            <button
              type="button"
              id="<%= id %>-bulk-<%= index %>"
              onclick="<%= action.onclick %>"
              disabled
              class="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md bg-slate-800 text-slate-400 border border-slate-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
            >
              <%= action.icon || '' %>
              <%= action.text %>
            </button>
          <% }); %>
        </div>
      <% } %>
    </div>
  <% } %>

  <!-- Table Container -->
  <div class="bg-slate-900 rounded-lg border border-slate-700 overflow-hidden">
    <div class="overflow-x-auto">
      <table class="w-full <%= locals.tableClass || '' %>">
        <!-- Table Header -->
        <thead class="bg-slate-800 border-b border-slate-700">
          <tr>
            <% if (selectable) { %>
              <th class="px-4 py-3 text-left">
                <input
                  type="checkbox"
                  id="<%= id %>-select-all"
                  class="h-4 w-4 rounded border-slate-600 bg-slate-700 text-blue-600 focus:ring-blue-500 focus:ring-offset-slate-900"
                >
              </th>
            <% } %>

            <% headers.forEach((header, index) => { %>
              <th class="px-4 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider <%= header.class || '' %>">
                <% if (sortable && header.sortable !== false) { %>
                  <button
                    type="button"
                    onclick="sortTable('<%= id %>', '<%= header.key %>', '<%= index %>')"
                    class="flex items-center gap-1 hover:text-white transition-colors duration-200"
                  >
                    <%= header.text %>
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
                    </svg>
                  </button>
                <% } else { %>
                  <%= header.text %>
                <% } %>
              </th>
            <% }); %>

            <% if (actionButtons.length > 0) { %>
              <th class="px-4 py-3 text-right text-xs font-medium text-slate-300 uppercase tracking-wider">
                Actions
              </th>
            <% } %>
          </tr>
        </thead>

        <!-- Table Body -->
        <tbody class="bg-slate-900 divide-y divide-slate-700">
          <% if (loading) { %>
            <tr>
              <td colspan="<%= headers.length + (selectable ? 1 : 0) + (actionButtons.length > 0 ? 1 : 0) %>" class="px-4 py-8 text-center">
                <div class="flex flex-col items-center space-y-2">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                  <span class="text-sm text-slate-400">Loading...</span>
                </div>
              </td>
            </tr>
          <% } else if (paginatedData.length === 0) { %>
            <tr>
              <td colspan="<%= headers.length + (selectable ? 1 : 0) + (actionButtons.length > 0 ? 1 : 0) %>" class="px-4 py-8 text-center">
                <div class="flex flex-col items-center space-y-2">
                  <svg class="h-12 w-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                  </svg>
                  <span class="text-sm text-slate-400"><%= empty %></span>
                </div>
              </td>
            </tr>
          <% } else { %>
            <% paginatedData.forEach((row, rowIndex) => { %>
              <%
                // Determine row class if function is provided
                let rowClassName = 'hover:bg-slate-800 transition-colors duration-150';
                if (typeof locals.rowClass === 'function') {
                  rowClassName += ' ' + locals.rowClass(row, rowIndex);
                }
              %>
              <tr class="<%= rowClassName %>">
                <% if (selectable) { %>
                  <td class="px-4 py-3">
                    <input
                      type="checkbox"
                      class="row-checkbox h-4 w-4 rounded border-slate-600 bg-slate-700 text-blue-600 focus:ring-blue-500 focus:ring-offset-slate-900"
                      data-row-id="<%= row.id || rowIndex %>"
                      value="<%= row.id || rowIndex %>"
                    >
                  </td>
                <% } %>

                <% headers.forEach((header, colIndex) => { %>
                  <%
                    // Determine cell class if function is provided
                    let cellClassName = 'px-4 py-3 whitespace-nowrap text-sm text-slate-300';
                    if (typeof locals.cellClass === 'function') {
                      cellClassName += ' ' + locals.cellClass(row, header.key, rowIndex, colIndex);
                    }
                  %>
                  <td class="<%= cellClassName %>">
                    <%= row[header.key] || '' %>
                  </td>
                <% }); %>

                <% if (actionButtons.length > 0) { %>
                  <td class="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                    <div class="flex justify-end gap-2">
                      <% actionButtons.forEach((action, actionIndex) => { %>
                        <button
                          type="button"
                          onclick="<%= action.onclick.replace('{rowIndex}', rowIndex).replace('{rowData}', JSON.stringify(row)) %>"
                          class="inline-flex items-center px-2 py-1 text-xs font-medium rounded <%= action.class || 'text-blue-400 hover:text-blue-300 hover:bg-blue-900/20' %> transition-colors duration-200"
                        >
                          <%= action.icon || '' %>
                          <%= action.text %>
                        </button>
                      <% }); %>
                    </div>
                  </td>
                <% } %>
              </tr>
            <% }); %>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Pagination -->
  <% if (pagination && totalPages > 1) { %>
    <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-slate-400">
        Showing <%= startIndex + 1 %> to <%= Math.min(endIndex, totalItems) %> of <%= totalItems %> results
      </div>
      <div class="flex items-center space-x-2">
        <button
          type="button"
          onclick="goToPage('<%= id %>', <%= currentPage - 1 %>)"
          <%= currentPage === 1 ? 'disabled' : '' %>
          class="px-3 py-2 text-sm font-medium rounded-md bg-slate-800 text-slate-400 border border-slate-700 hover:bg-slate-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
        >
          Previous
        </button>

        <!-- Page Numbers -->
        <div class="flex items-center space-x-1">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) { %>
              <button
                type="button"
                onclick="goToPage('<%= id %>', <%= i %>)"
                class="px-3 py-2 text-sm font-medium rounded-md <%= i === currentPage ? 'bg-blue-600 text-white' : 'bg-slate-800 text-slate-400 border border-slate-700 hover:bg-slate-700' %> transition-colors duration-200"
              >
                <%= i %>
              </button>
            <% } else if (i === currentPage - 3 || i === currentPage + 3) { %>
              <span class="px-2 text-sm text-slate-500">...</span>
            <% } %>
          <% } %>
        </div>

        <button
          type="button"
          onclick="goToPage('<%= id %>', <%= currentPage + 1 %>)"
          <%= currentPage === totalPages ? 'disabled' : '' %>
          class="px-3 py-2 text-sm font-medium rounded-md bg-slate-800 text-slate-400 border border-slate-700 hover:bg-slate-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
        >
          Next
        </button>
      </div>
    </div>
  <% } %>
</div>

<script>
  (function() {
    const tableId = '<%= id %>';
    const selectAllCheckbox = document.getElementById(tableId + '-select-all');
    const rowCheckboxes = document.querySelectorAll('.row-checkbox');
    const searchInput = document.getElementById(tableId + '-search');
    const filterSelect = document.getElementById(tableId + '-filter');

    // Select all functionality
    if (selectAllCheckbox) {
      selectAllCheckbox.addEventListener('change', function() {
        rowCheckboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
        });
        updateBulkActions();
      });
    }

    // Row selection
    rowCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateBulkActions);
    });

    // Search functionality
    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          const query = this.value.trim();
          if (typeof window.tableSearch === 'function') {
            window.tableSearch(tableId, query);
          }
        }, 300);
      });
    }

    // Filter functionality
    if (filterSelect) {
      filterSelect.addEventListener('change', function() {
        const filter = this.value;
        if (typeof window.tableFilter === 'function') {
          window.tableFilter(tableId, filter);
        }
      });
    }

    function updateBulkActions() {
      const selectedRows = document.querySelectorAll('.row-checkbox:checked').length;
      const bulkButtons = document.querySelectorAll('[id^="' + tableId + '-bulk-"]');

      bulkButtons.forEach(button => {
        button.disabled = selectedRows === 0;
      });

      if (selectAllCheckbox) {
        const totalRows = rowCheckboxes.length;
        selectAllCheckbox.checked = selectedRows === totalRows && totalRows > 0;
        selectAllCheckbox.indeterminate = selectedRows > 0 && selectedRows < totalRows;
      }
    }

    window.updateBulkActions = updateBulkActions;
  })();

  function sortTable(tableId, columnKey, columnIndex) {
    if (typeof window.tableSort === 'function') {
      window.tableSort(tableId, columnKey, columnIndex);
    }
  }

  function goToPage(tableId, page) {
    if (typeof window.tablePagination === 'function') {
      window.tablePagination(tableId, page);
    }
  }
</script>