<%-
  /**
   * Shadcn-style Input Component for Forms
   * Variables:
   * - type: Input type (string, default: 'text')
   * - name: Input name attribute (string, required)
   * - id: Input ID (string, optional, defaults to name)
   * - placeholder: Input placeholder (string, optional)
   * - value: Input value (string, optional)
   * - required: Mark as required (boolean, default: false)
   * - disabled: Disable input (boolean, default: false)
   * - readonly: Make input readonly (boolean, default: false)
   * - error: Error message (string, optional)
   * - helper: Helper text (string, optional)
   * - label: Input label (string, optional)
   * - size: Input size (sm, md, lg, default: 'md')
   * - variant: Style variant (default, destructive, ghost, outline, secondary, default: 'default')
   * - class: Additional CSS classes (string, optional)
   * - minlength: Minimum length (number, optional)
   * - maxlength: Maximum length (number, optional)
   * - pattern: Validation pattern (string, optional)
   * - autocomplete: Autocomplete attribute (string, optional)
   * - autofocus: Auto focus input (boolean, default: false)
   */

  // Set defaults
  const type = locals.type || 'text';
  const size = locals.size || 'md';
  const variant = locals.variant || 'default';
  const required = locals.required === true;
  const disabled = locals.disabled === true;
  const readonly = locals.readonly === true;
  const autofocus = locals.autofocus === true;
  const inputId = locals.id || locals.name;
  const error = locals.error || '';
  const helper = locals.helper || '';
  const label = locals.label || '';

  // Size configurations using CVA-style variants
  const sizeVariants = {
    sm: 'h-9 px-3 text-sm rounded-md',
    md: 'h-10 px-4 text-sm rounded-md',
    lg: 'h-11 px-8 text-base rounded-md'
  };

  // Variant configurations using CVA-style variants
  const variants = {
    default: [
      'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background',
      'file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:cursor-not-allowed disabled:opacity-50'
    ].join(' '),
    destructive: [
      'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background',
      'file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:cursor-not-allowed disabled:opacity-50 border-red-500 focus-visible:ring-red-500'
    ].join(' '),
    ghost: [
      'flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background',
      'file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:cursor-not-allowed disabled:opacity-50 border-transparent'
    ].join(' '),
    outline: [
      'flex h-10 w-full rounded-md border-2 border-input bg-background px-3 py-2 text-sm ring-offset-background',
      'file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:cursor-not-allowed disabled:opacity-50'
    ].join(' '),
    secondary: [
      'flex h-10 w-full rounded-md border border-input bg-secondary px-3 py-2 text-sm ring-offset-background',
      'file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:cursor-not-allowed disabled:opacity-50'
    ].join(' ')
  };

  // Dark theme classes
  const darkClasses = [
    'bg-slate-900 border-slate-700 text-white',
    'placeholder:text-slate-400',
    'focus-visible:ring-blue-500',
    'disabled:bg-slate-800 disabled:text-slate-500'
  ].join(' ');

  // Error state classes
  const errorClasses = error ? 'border-red-500 focus-visible:ring-red-500' : '';

  // Combine classes
  const baseClasses = variants[variant] || variants.default;
  const sizeClass = sizeVariants[size] || sizeVariants.md;
  const inputClasses = `${baseClasses} ${darkClasses} ${errorClasses} ${locals.class || ''}`;

  // Label classes
  const labelClasses = {
    default: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-slate-300',
    error: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-red-400',
    disabled: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-slate-500'
  };

  const currentLabelClass = error ? labelClasses.error : (disabled ? labelClasses.disabled : labelClasses.default);
%>

<div class="space-y-2 <%= locals.class || '' %>">
  <% if (label) { %>
    <label
      for="<%= inputId %>"
      class="<%= currentLabelClass %> <%= required ? 'after:content-[\"*\"] after:ml-1 after:text-red-400' : '' %>"
    >
      <%= label %>
    </label>
  <% } %>

  <input
    type="<%= type %>"
    id="<%= inputId %>"
    name="<%= locals.name %>"
    placeholder="<%= locals.placeholder || '' %>"
    value="<%= locals.value || '' %>"
    <%= required ? 'required' : '' %>
    <%= disabled ? 'disabled' : '' %>
    <%= readonly ? 'readonly' : '' %>
    <%= autofocus ? 'autofocus' : '' %>
    <%= locals.minlength ? 'minlength="' + locals.minlength + '"' : '' %>
    <%= locals.maxlength ? 'maxlength="' + locals.maxlength + '"' : '' %>
    <%= locals.pattern ? 'pattern="' + locals.pattern + '"' : '' %>
    <%= locals.autocomplete ? 'autocomplete="' + locals.autocomplete + '"' : '' %>
    class="<%= inputClasses %>"
  />

  <% if (error) { %>
    <p class="text-sm text-red-400 flex items-center gap-1">
      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <%= error %>
    </p>
  <% } else if (helper) { %>
    <p class="text-sm text-slate-400 flex items-center gap-1">
      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <%= helper %>
    </p>
  <% } %>

  <% if (locals.maxlength) { %>
    <div class="text-right">
      <span class="text-xs text-slate-500" id="<%= inputId %>-char-count">
        <%= (locals.value ? locals.value.length : 0) %>/<%= locals.maxlength %>
      </span>
    </div>
    <script>
      (function() {
        const input = document.getElementById('<%= inputId %>');
        const counter = document.getElementById('<%= inputId %>-char-count');

        if (input && counter) {
          input.addEventListener('input', function() {
            const count = this.value.length;
            const max = <%= locals.maxlength %>;
            counter.textContent = count + '/' + max;

            if (count > max * 0.9) {
              counter.classList.add('text-orange-400');
              counter.classList.remove('text-slate-500');
            } else {
              counter.classList.remove('text-orange-400');
              counter.classList.add('text-slate-500');
            }

            if (count >= max) {
              counter.classList.add('text-red-400');
              counter.classList.remove('text-orange-400', 'text-slate-500');
            }
          });
        }
      })();
    </script>
  <% } %>
</div>