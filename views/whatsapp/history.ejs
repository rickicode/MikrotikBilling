<%- include('../partials/header', { title: 'WhatsApp Message History', currentUrl: '/whatsapp/history' }) %>

<div class="main-content">
    <div class="container-fluid mt-4">
        <!-- WhatsApp Navigation -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body py-3">
                        <nav class="nav">
                            <a class="nav-link <%= currentUrl === '/whatsapp/management' ? 'active' : '' %>" href="/whatsapp/management">
                                <i class="bi bi-house"></i> Dashboard
                            </a>
                            <a class="nav-link <%= currentUrl && currentUrl.includes('/scan') ? 'active' : '' %>" href="/whatsapp/scan">
                                <i class="bi bi-qr-code"></i> QR Scanner
                            </a>
                            <a class="nav-link <%= currentUrl && currentUrl.includes('/history') ? 'active' : '' %>" href="/whatsapp/history">
                                <i class="bi bi-chat-dots"></i> Message History
                            </a>
                            <a class="nav-link <%= currentUrl && currentUrl.includes('/message-templates-page') ? 'active' : '' %>" href="/whatsapp/message-templates-page">
                                <i class="bi bi-file-text"></i> Templates
                            </a>
                            <a class="nav-link <%= currentUrl && currentUrl.includes('/whatsapp-settings') ? 'active' : '' %>" href="/whatsapp/whatsapp-settings">
                                <i class="bi bi-gear"></i> Settings
                            </a>
                        </nav>
                    </div>
                </div>
            </div>
        </div>

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3">WhatsApp Message History</h1>
            <div>
                <button type="button" class="btn btn-outline-secondary me-2" onclick="refreshHistory()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="bi bi-funnel"></i> Filter Messages
                </h6>
            </div>
            <div class="card-body">
                <form id="filterForm" class="row g-3">
                    <div class="col-md-3">
                        <label for="dateFrom" class="form-label">From Date</label>
                        <input type="date" class="form-control" id="dateFrom" name="dateFrom">
                    </div>
                    <div class="col-md-3">
                        <label for="dateTo" class="form-label">To Date</label>
                        <input type="date" class="form-control" id="dateTo" name="dateTo">
                    </div>
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter" name="status">
                            <option value="">All Status</option>
                            <option value="sent">Sent</option>
                            <option value="delivered">Delivered</option>
                            <option value="failed">Failed</option>
                            <option value="pending">Pending</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="searchFilter" class="form-label">Search</label>
                        <input type="text" class="form-control" id="searchFilter" name="search" placeholder="Phone number or message...">
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-search"></i> Apply Filters
                        </button>
                        <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Messages Table -->
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="bi bi-chat-dots"></i> Message History
                </h6>
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-success" onclick="exportMessages('csv')">
                        <i class="bi bi-file-earmark-csv"></i> Export CSV
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="exportMessages('json')">
                        <i class="bi bi-file-earmark-code"></i> Export JSON
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>
                                    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                </th>
                                <th>Time</th>
                                <th>Type</th>
                                <th>From/To</th>
                                <th>Message</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="messagesTableBody">
                            <tr>
                                <td colspan="7" class="text-center text-muted">
                                    <i class="bi bi-hourglass-split"></i> Loading messages...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Messages pagination">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- Pagination will be populated by JavaScript -->
                    </ul>
                </nav>

                <!-- Bulk Actions -->
                <div id="bulkActions" class="mt-3" style="display: none;">
                    <div class="card bg-light">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <span class="me-3">Selected <span id="selectedCount">0</span> messages</span>
                                <button type="button" class="btn btn-danger btn-sm me-2" onclick="deleteSelected()">
                                    <i class="bi bi-trash"></i> Delete Selected
                                </button>
                                <button type="button" class="btn btn-info btn-sm" onclick="resendSelected()">
                                    <i class="bi bi-arrow-repeat"></i> Resend Selected
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Message Details Modal -->
<div class="modal fade" id="messageDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Message Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="messageDetailsContent">
                    <!-- Message details will be populated here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="resendMessageBtn" style="display: none;" onclick="resendMessage()">
                    <i class="bi bi-arrow-repeat"></i> Resend Message
                </button>
            </div>
        </div>
    </div>
</div>
    </div>
</div>

<%- include('../partials/footer', { scripts: ['/public/js/whatsapp.js'] }) %>

<script>
    // Global variables
    let currentPage = 1;
    let messagesPerPage = 50;
    let totalMessages = 0;
    let selectedMessages = new Set();
    let allMessages = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadMessageHistory();
        initializeFilters();

        // Auto-refresh every 30 seconds
        setInterval(loadMessageHistory, 30000);
    });

    // Load message history
    async function loadMessageHistory(page = 1) {
        try {
            const formData = new FormData(document.getElementById('filterForm'));
            const params = new URLSearchParams(formData);
            params.set('page', page);
            params.set('limit', messagesPerPage);

            const response = await fetch(`/whatsapp/api/messages?${params}`);
            const data = await response.json();

            if (data.success) {
                allMessages = data.messages || [];
                totalMessages = data.total || 0;
                currentPage = page;

                updateMessagesTable(allMessages);
                updatePagination();
                updateBulkActions();
            } else {
                showError('Gagal memuat riwayat pesan');
            }
        } catch (error) {
            console.error('Error loading message history:', error);
            showError('Terjadi kesalahan saat memuat riwayat pesan');
        }
    }

    // Update messages table
    function updateMessagesTable(messages) {
        const tbody = document.getElementById('messagesTableBody');
        if (!tbody) return;

        if (messages.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center text-muted">
                        <i class="bi bi-inbox"></i> Tidak ada pesan
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = messages.map(message => `
            <tr>
                <td>
                    <input type="checkbox" class="message-checkbox" value="${message.id}"
                           onchange="toggleMessageSelection('${message.id}')">
                </td>
                <td>${new Date(message.createdAt).toLocaleString('id-ID')}</td>
                <td>
                    <span class="badge bg-${message.type === 'outgoing' ? 'primary' : 'secondary'}">
                        ${message.type === 'outgoing' ? 'Keluar' : 'Masuk'}
                    </span>
                </td>
                <td>${message.phoneNumber}</td>
                <td>${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}</td>
                <td>
                    <span class="badge bg-${getStatusColor(message.status)}">
                        ${getStatusText(message.status)}
                    </span>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewMessageDetails('${message.id}')">
                        <i class="bi bi-eye"></i>
                    </button>
                </td>
            </tr>
        `).join('');
    }

    // Get status color for badges
    function getStatusColor(status) {
        switch (status) {
            case 'sent': return 'success';
            case 'delivered': return 'info';
            case 'failed': return 'danger';
            case 'pending': return 'warning';
            default: return 'secondary';
        }
    }

    // Get status text in Indonesian
    function getStatusText(status) {
        switch (status) {
            case 'sent': return 'Terkirim';
            case 'delivered': return 'Terkirim';
            case 'failed': return 'Gagal';
            case 'pending': return 'Menunggu';
            default: return status;
        }
    }

    // Initialize filters
    function initializeFilters() {
        const filterForm = document.getElementById('filterForm');
        if (filterForm) {
            filterForm.addEventListener('submit', function(e) {
                e.preventDefault();
                currentPage = 1;
                loadMessageHistory();
            });
        }
    }

    // Refresh history
    function refreshHistory() {
        loadMessageHistory(currentPage);
    }

    // Clear filters
    function clearFilters() {
        const filterForm = document.getElementById('filterForm');
        if (filterForm) {
            filterForm.reset();
            currentPage = 1;
            loadMessageHistory();
        }
    }

    // Update pagination
    function updatePagination() {
        const pagination = document.getElementById('pagination');
        if (!pagination) return;

        const totalPages = Math.ceil(totalMessages / messagesPerPage);

        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }

        let paginationHTML = '';

        // Previous button
        paginationHTML += `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="loadMessageHistory(${currentPage - 1}); return false;">
                    <i class="bi bi-chevron-left"></i>
                </a>
            </li>
        `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                paginationHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="loadMessageHistory(${i}); return false;">${i}</a>
                    </li>
                `;
            } else if (i === currentPage - 3 || i === currentPage + 3) {
                paginationHTML += `
                    <li class="page-item disabled">
                        <a class="page-link" href="#">...</a>
                    </li>
                `;
            }
        }

        // Next button
        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="loadMessageHistory(${currentPage + 1}); return false;">
                    <i class="bi bi-chevron-right"></i>
                </a>
            </li>
        `;

        pagination.innerHTML = paginationHTML;
    }

    // Toggle select all checkboxes
    function toggleSelectAll() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const messageCheckboxes = document.querySelectorAll('.message-checkbox');

        messageCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
            const messageId = checkbox.value;
            if (selectAllCheckbox.checked) {
                selectedMessages.add(messageId);
            } else {
                selectedMessages.delete(messageId);
            }
        });

        updateBulkActions();
    }

    // Toggle message selection
    function toggleMessageSelection(messageId) {
        if (selectedMessages.has(messageId)) {
            selectedMessages.delete(messageId);
        } else {
            selectedMessages.add(messageId);
        }
        updateBulkActions();
    }

    // Update bulk actions display
    function updateBulkActions() {
        const bulkActions = document.getElementById('bulkActions');
        const selectedCount = document.getElementById('selectedCount');

        if (selectedCount) {
            selectedCount.textContent = selectedMessages.size;
        }

        if (bulkActions) {
            bulkActions.style.display = selectedMessages.size > 0 ? 'block' : 'none';
        }
    }

    // Delete selected messages
    async function deleteSelected() {
        if (selectedMessages.size === 0) {
            showError('Tidak ada pesan yang dipilih');
            return;
        }

        if (!confirm(`Apakah Anda yakin ingin menghapus ${selectedMessages.size} pesan?`)) {
            return;
        }

        try {
            const response = await fetch('/whatsapp/api/messages/bulk-delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageIds: Array.from(selectedMessages)
                })
            });

            const data = await response.json();

            if (data.success) {
                showSuccess('Pesan berhasil dihapus');
                selectedMessages.clear();
                loadMessageHistory(currentPage);
            } else {
                showError(data.message || 'Gagal menghapus pesan');
            }
        } catch (error) {
            console.error('Error deleting messages:', error);
            showError('Terjadi kesalahan saat menghapus pesan');
        }
    }

    // Resend selected messages
    async function resendSelected() {
        if (selectedMessages.size === 0) {
            showError('Tidak ada pesan yang dipilih');
            return;
        }

        try {
            const response = await fetch('/whatsapp/api/messages/bulk-resend', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageIds: Array.from(selectedMessages)
                })
            });

            const data = await response.json();

            if (data.success) {
                showSuccess('Pesan berhasil dikirim ulang');
                selectedMessages.clear();
                loadMessageHistory(currentPage);
            } else {
                showError(data.message || 'Gagal mengirim ulang pesan');
            }
        } catch (error) {
            console.error('Error resending messages:', error);
            showError('Terjadi kesalahan saat mengirim ulang pesan');
        }
    }

    // Export messages
    async function exportMessages(format) {
        try {
            const formData = new FormData(document.getElementById('filterForm'));
            const params = new URLSearchParams(formData);
            params.set('format', format);

            const response = await fetch(`/whatsapp/api/messages/export?${params}`);

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `whatsapp-messages.${format}`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                showSuccess(`Pesan berhasil diekspor dalam format ${format.toUpperCase()}`);
            } else {
                showError('Gagal mengekspor pesan');
            }
        } catch (error) {
            console.error('Error exporting messages:', error);
            showError('Terjadi kesalahan saat mengekspor pesan');
        }
    }

    // View message details
    async function viewMessageDetails(messageId) {
        try {
            const response = await fetch(`/whatsapp/api/messages/${messageId}`);
            const data = await response.json();

            if (data.success) {
                const message = data.message;
                const detailsContent = document.getElementById('messageDetailsContent');

                detailsContent.innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <strong>ID:</strong> ${message.id}<br>
                            <strong>Waktu:</strong> ${new Date(message.createdAt).toLocaleString('id-ID')}<br>
                            <strong>Tipe:</strong> ${message.type === 'outgoing' ? 'Keluar' : 'Masuk'}<br>
                            <strong>Nomor:</strong> ${message.phoneNumber}<br>
                            <strong>Status:</strong> <span class="badge bg-${getStatusColor(message.status)}">${getStatusText(message.status)}</span>
                        </div>
                        <div class="col-md-6">
                            <strong>Terkirim pada:</strong> ${message.sentAt ? new Date(message.sentAt).toLocaleString('id-ID') : '-'}<br>
                            <strong>Update terakhir:</strong> ${message.updatedAt ? new Date(message.updatedAt).toLocaleString('id-ID') : '-'}<br>
                            <strong>Attempts:</strong> ${message.attempts || 0}<br>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-12">
                            <strong>Isi Pesan:</strong><br>
                            <div class="border p-3 bg-light">
                                ${message.content.replace(/\n/g, '<br>')}
                            </div>
                        </div>
                    </div>
                    ${message.error ? `
                        <hr>
                        <div class="row">
                            <div class="col-12">
                                <strong>Error:</strong><br>
                                <div class="alert alert-danger">
                                    ${message.error}
                                </div>
                            </div>
                        </div>
                    ` : ''}
                `;

                // Show/hide resend button based on status
                const resendBtn = document.getElementById('resendMessageBtn');
                if (resendBtn) {
                    resendBtn.style.display = (message.status === 'failed' || message.status === 'pending') ? 'inline-block' : 'none';
                    resendBtn.onclick = () => resendMessage(messageId);
                }

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('messageDetailsModal'));
                modal.show();
            } else {
                showError('Gagal memuat detail pesan');
            }
        } catch (error) {
            console.error('Error viewing message details:', error);
            showError('Terjadi kesalahan saat memuat detail pesan');
        }
    }

    // Resend single message
    async function resendMessage(messageId) {
        try {
            const response = await fetch(`/whatsapp/api/messages/${messageId}/resend`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                showSuccess('Pesan berhasil dikirim ulang');

                // Close modal and refresh
                const modal = bootstrap.Modal.getInstance(document.getElementById('messageDetailsModal'));
                modal.hide();
                loadMessageHistory(currentPage);
            } else {
                showError(data.message || 'Gagal mengirim ulang pesan');
            }
        } catch (error) {
            console.error('Error resending message:', error);
            showError('Terjadi kesalahan saat mengirim ulang pesan');
        }
    }

    // Show success message
    function showSuccess(message) {
        if (typeof ToastSystem !== 'undefined') {
            ToastSystem.success('Sukses', message);
        }
    }

    // Show error message
    function showError(message) {
        if (typeof ToastSystem !== 'undefined') {
            ToastSystem.error('Error', message);
        }
    }
</script>