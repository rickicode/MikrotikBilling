<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - <%= settings.company_name %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .status-badge {
            min-width: 100px;
        }
        .metric-card {
            transition: all 0.3s ease;
        }
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .connection-status {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .connection-status.healthy { background-color: #28a745; }
        .connection-status.unhealthy { background-color: #dc3545; }
        .connection-status.available { background-color: #28a745; }
        .connection-status.busy { background-color: #ffc107; }
        .progress-container {
            position: relative;
        }
        .progress-value {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        .refresh-animation {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .metric-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
        }
        .chart-container {
            height: 300px;
            position: relative;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2><i class="fas fa-network-wired me-2"></i><%= title %></h2>
                        <p class="text-muted mb-0">Real-time monitoring of Mikrotik connection pool performance</p>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" onclick="refreshData()" id="refreshBtn">
                            <i class="fas fa-sync-alt me-1"></i> Refresh
                        </button>
                        <button class="btn btn-outline-success" onclick="testConnection()">
                            <i class="fas fa-plug me-1"></i> Test Connection
                        </button>
                        <button class="btn btn-outline-warning" onclick="resetConnectionPool()">
                            <i class="fas fa-redo me-1"></i> Reset Pool
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Connection Status Overview -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <span class="connection-status <%= healthStatus.healthy ? 'healthy' : 'unhealthy' %>"></span>
                            <div>
                                <h6 class="card-subtitle mb-1">Connection Status</h6>
                                <h5 class="card-title mb-0">
                                    <span class="badge bg-<%= getStatusBadgeClass(healthStatus.status) %>">
                                        <%= healthStatus.status.toUpperCase() %>
                                    </span>
                                </h5>
                            </div>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <% if (healthStatus.responseTime) { %>
                                    Response: <%= healthStatus.responseTime %>ms
                                <% } %>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-1">Active Connections</h6>
                        <h5 class="card-title mb-0">
                            <%= mikrotikStats.pool.connections.active %> / <%= mikrotikStats.pool.connections.total %>
                        </h5>
                        <div class="progress progress-container mt-2">
                            <div class="progress-bar <%= getProgressBarClass(mikrotikStats.pool.connections.utilization) %>"
                                 style="width: <%= mikrotikStats.pool.connections.utilization %>%">
                            </div>
                            <div class="progress-value"><%= Math.round(mikrotikStats.pool.connections.utilization) %>%</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-1">Success Rate</h6>
                        <h5 class="card-title mb-0"><%= mikrotikStats.client.successRate %>%</h5>
                        <div class="progress progress-container mt-2">
                            <div class="progress-bar <%= getProgressBarClass(mikrotikStats.client.successRate) %>"
                                 style="width: <%= mikrotikStats.client.successRate %>%">
                            </div>
                            <div class="progress-value"><%= mikrotikStats.client.successRate %>%</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-1">Circuit Breaker</h6>
                        <h5 class="card-title mb-0">
                            <span class="badge bg-<%= getStatusBadgeClass(mikrotikStats.pool.circuitBreaker.state) %>">
                                <%= mikrotikStats.pool.circuitBreaker.state %>
                            </span>
                        </h5>
                        <small class="text-muted">
                            <% if (mikrotikStats.pool.circuitBreaker.timeoutRemaining > 0) { %>
                                Timeout in: <%= Math.round(mikrotikStats.pool.circuitBreaker.timeoutRemaining / 1000) %>s
                            <% } %>
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-tachometer-alt me-2"></i>Performance Metrics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h4 class="text-primary"><%= mikrotikStats.pool.performance.averageResponseTime %>ms</h4>
                                    <p class="mb-0">Avg Response Time</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h4 class="text-success"><%= mikrotikStats.pool.performance.responseTimePercentiles.p95 %>ms</h4>
                                    <p class="mb-0">95th Percentile</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h4 class="text-warning"><%= mikrotikStats.pool.performance.retryRate %>%</h4>
                                    <p class="mb-0">Retry Rate</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h4 class="text-info"><%= mikrotikStats.client.cacheHitRate %>%</h4>
                                    <p class="mb-0">Cache Hit Rate</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Connection Pool Details -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-server me-2"></i>Connection Pool Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Connection ID</th>
                                        <th>Status</th>
                                        <th>Age</th>
                                        <th>Idle Time</th>
                                        <th>Requests</th>
                                        <th>Avg Response</th>
                                        <th>Errors</th>
                                        <th>Health</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% mikrotikStats.connections.forEach(conn => { %>
                                        <tr>
                                            <td><code><%= conn.id %></code></td>
                                            <td>
                                                <span class="badge bg-<%= conn.state === 'busy' ? 'warning' : (conn.healthy ? 'success' : 'danger') %>">
                                                    <%= conn.state %>
                                                </span>
                                            </td>
                                            <td><%= formatUptime(conn.age) %></td>
                                            <td><%= formatUptime(conn.idleTime) %></td>
                                            <td><%= conn.totalRequests %></td>
                                            <td><%= conn.averageResponseTime.toFixed(0) %>ms</td>
                                            <td><%= conn.errorCount %></td>
                                            <td>
                                                <% if (conn.healthy) { %>
                                                    <i class="fas fa-check-circle text-success"></i>
                                                <% } else { %>
                                                    <i class="fas fa-times-circle text-danger"></i>
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-cogs me-2"></i>Configuration</h5>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">Host:</dt>
                            <dd class="col-sm-6"><code><%= mikrotikStats.config.host %>:<%= mikrotikStats.config.port %></code></dd>

                            <dt class="col-sm-6">Pool Size:</dt>
                            <dd class="col-sm-6"><%= mikrotikStats.config.poolSize.min %> - <%= mikrotikStats.config.poolSize.max %></dd>

                            <dt class="col-sm-6">Circuit Breaker:</dt>
                            <dd class="col-sm-6"><%= mikrotikStats.config.circuitBreaker.threshold %> failures</dd>

                            <dt class="col-sm-6">Retry Attempts:</dt>
                            <dd class="col-sm-6"><%= mikrotikStats.config.retry.attempts %></dd>

                            <dt class="col-sm-6">Health Check:</dt>
                            <dd class="col-sm-6"><%= mikrotikStats.config.healthCheck.interval / 1000 %>s interval</dd>

                            <dt class="col-sm-6">Batching:</dt>
                            <dd class="col-sm-6">
                                <% if (mikrotikStats.config.batching.enabled) { %>
                                    <span class="badge bg-success">Enabled</span>
                                <% } else { %>
                                    <span class="badge bg-secondary">Disabled</span>
                                <% } %>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <!-- Queue and Error Statistics -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Queue Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <h6>Queued Requests</h6>
                                <h3 class="text-info"><%= mikrotikStats.pool.queue.length %></h3>
                            </div>
                            <div class="col-6">
                                <h6>Longest Wait</h6>
                                <h3 class="text-warning">
                                    <%= mikrotikStats.pool.queue.longestWaitTime > 0 ? Math.round(mikrotikStats.pool.queue.longestWaitTime / 1000) + 's' : '0s' %>
                                </h3>
                            </div>
                        </div>
                        <% if (Object.keys(mikrotikStats.pool.queue.byPriority).length > 0) { %>
                            <hr>
                            <h6>Queue by Priority</h6>
                            <% Object.entries(mikrotikStats.pool.queue.byPriority).forEach(([priority, count]) => { %>
                                <div class="d-flex justify-content-between mb-1">
                                    <span><%= priority.charAt(0).toUpperCase() + priority.slice(1) %></span>
                                    <span class="badge bg-secondary"><%= count %></span>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>Error Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <h6>Total Errors</h6>
                                <h3 class="text-danger"><%= mikrotikStats.errors.total %></h3>
                            </div>
                            <div class="col-6">
                                <h6>Error Rate</h6>
                                <h3 class="text-warning"><%= mikrotikStats.errors.errorRate %>%</h3>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-4">
                                <small class="text-muted">Connection</small>
                                <div class="fw-bold"><%= mikrotikStats.errors.connectionErrors %></div>
                            </div>
                            <div class="col-4">
                                <small class="text-muted">Timeouts</small>
                                <div class="fw-bold"><%= mikrotikStats.errors.timeouts %></div>
                            </div>
                            <div class="col-4">
                                <small class="text-muted">Others</small>
                                <div class="fw-bold"><%= mikrotikStats.errors.total - mikrotikStats.errors.connectionErrors - mikrotikStats.errors.timeouts %></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Auto-refresh every 30 seconds
        let refreshInterval;

        function startAutoRefresh() {
            refreshInterval = setInterval(() => {
                refreshData();
            }, 30000);
        }

        function stopAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        }

        async function refreshData() {
            const refreshBtn = document.getElementById('refreshBtn');
            const icon = refreshBtn.querySelector('i');

            try {
                icon.classList.add('refresh-animation');

                const response = await fetch('/api/network-stats');
                const data = await response.json();

                if (data.success) {
                    // Reload the page to show updated data
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error refreshing data:', error);
            } finally {
                icon.classList.remove('refresh-animation');
            }
        }

        async function testConnection() {
            try {
                const response = await fetch('/api/test-connection', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    alert(`Connection test successful!\n\nCommands executed: ${data.data.testResults.commandsExecuted}\nSuccessful: ${data.data.testResults.successfulCommands}\nTotal time: ${data.data.testResults.totalTime}ms\nAverage per command: ${data.data.testResults.averageTimePerCommand}ms`);
                } else {
                    alert('Connection test failed: ' + data.error);
                }
            } catch (error) {
                console.error('Error testing connection:', error);
                alert('Error testing connection: ' + error.message);
            }
        }

        async function resetConnectionPool() {
            if (!confirm('Are you sure you want to reset the connection pool? This will temporarily disconnect all Mikrotik connections.')) {
                return;
            }

            try {
                const response = await fetch('/api/reset-connection-pool', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    alert('Connection pool reset successfully!');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    alert('Failed to reset connection pool: ' + data.error);
                }
            } catch (error) {
                console.error('Error resetting connection pool:', error);
                alert('Error resetting connection pool: ' + error.message);
            }
        }

        // Start auto-refresh when page loads
        document.addEventListener('DOMContentLoaded', () => {
            startAutoRefresh();
        });

        // Clean up when page unloads
        window.addEventListener('beforeunload', () => {
            stopAutoRefresh();
        });
    </script>
</body>
</html>