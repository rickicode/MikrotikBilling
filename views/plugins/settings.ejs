<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plugin Settings: <%= plugin.name %> - <%= settings.company_name || 'HIJINETWORK WiFi' %></title>
    <link rel="stylesheet" href="/public/css/main.css">
    <link rel="stylesheet" href="/public/css/skeleton.css">
    <link rel="stylesheet" href="/public/css/animations.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .plugin-header {
            background: white;
            padding: 30px;
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .plugin-title {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .plugin-name {
            font-size: 28px;
            font-weight: 700;
            color: #333;
            margin: 0;
        }

        .plugin-version {
            background: #007bff;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .plugin-meta {
            display: flex;
            gap: 20px;
            align-items: center;
            color: #666;
            font-size: 14px;
        }

        .plugin-status {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }

        .status-indicator.active {
            background: #28a745;
        }

        .status-indicator.inactive {
            background: #6c757d;
        }

        .status-indicator.error {
            background: #dc3545;
        }

        .settings-container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .settings-tabs {
            display: flex;
            border-bottom: 2px solid #e9ecef;
            margin-bottom: 30px;
        }

        .tab-btn {
            background: none;
            border: none;
            padding: 12px 20px;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            color: #007bff;
            border-bottom-color: #007bff;
        }

        .tab-btn:hover {
            color: #007bff;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        }

        .form-help {
            font-size: 13px;
            color: #666;
            margin-top: 5px;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background: #0056b3;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .json-editor {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            min-height: 200px;
            white-space: pre-wrap;
            overflow-x: auto;
        }

        .info-box {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .info-box h4 {
            color: #0c5460;
            margin: 0 0 10px 0;
        }

        .info-box p {
            color: #0c5460;
            margin: 0;
            font-size: 14px;
        }

        .error-box {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .error-box h4 {
            color: #721c24;
            margin: 0 0 10px 0;
        }

        .error-box p {
            color: #721c24;
            margin: 0;
            font-size: 14px;
        }

        .plugin-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .info-item {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 6px;
        }

        .info-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            margin-bottom: 5px;
        }

        .info-value {
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        @media (max-width: 768px) {
            .plugin-title {
                flex-direction: column;
                align-items: flex-start;
            }

            .plugin-meta {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .form-actions {
                flex-direction: column;
            }

            .settings-tabs {
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/header') %>

    <main class="container" id="main-content">
        <!-- Plugin Header -->
        <div class="plugin-header">
            <div class="plugin-title">
                <h1 class="plugin-name"><%= plugin.name %></h1>
                <span class="plugin-version">v<%= plugin.version %></span>
            </div>

            <div class="plugin-meta">
                <div class="plugin-status">
                    <span class="status-indicator <%= plugin.is_active ? 'active' : plugin.has_error ? 'error' : 'inactive' %>"></span>
                    <span><%= plugin.is_active ? 'Active' : plugin.has_error ? 'Error' : 'Inactive' %></span>
                </div>

                <div>
                    <i class="fas fa-user"></i> <%= plugin.author %>
                </div>

                <% if (plugin.created_at) { %>
                    <div>
                        <i class="fas fa-calendar"></i> Created <%= new Date(plugin.created_at).toLocaleDateString() %>
                    </div>
                <% } %>

                <% if (plugin.is_builtin) { %>
                    <div>
                        <i class="fas fa-shield-alt"></i> Built-in Plugin
                    </div>
                <% } %>
            </div>

            <p style="margin: 15px 0 0 0; color: #666; line-height: 1.6;"><%= plugin.description %></p>

            <% if (plugin.has_error && plugin.error_message) { %>
                <div class="error-box">
                    <h4><i class="fas fa-exclamation-triangle"></i> Plugin Error</h4>
                    <p><%= plugin.error_message %></p>
                </div>
            <% } %>
        </div>

        <!-- Plugin Actions -->
        <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <div style="display: flex; gap: 15px; align-items: center;">
                <% if (plugin.is_active) { %>
                    <button class="btn btn-secondary" onclick="togglePlugin(false)">
                        <i class="fas fa-pause"></i> Deactivate Plugin
                    </button>
                <% } else { %>
                    <button class="btn btn-primary" onclick="togglePlugin(true)">
                        <i class="fas fa-play"></i> Activate Plugin
                    </button>
                <% } %>

                <a href="/plugins" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Plugins
                </a>

                <button class="btn btn-secondary" onclick="viewLogs()">
                    <i class="fas fa-file-alt"></i> View Logs
                </button>
            </div>
        </div>

        <!-- Settings Container -->
        <div class="settings-container">
            <div class="settings-tabs">
                <button class="tab-btn active" onclick="showTab('settings')">
                    <i class="fas fa-cog"></i> Settings
                </button>
                <button class="tab-btn" onclick="showTab('info')">
                    <i class="fas fa-info-circle"></i> Information
                </button>
                <button class="tab-btn" onclick="showTab('advanced')">
                    <i class="fas fa-tools"></i> Advanced
                </button>
            </div>

            <!-- Settings Tab -->
            <div id="settings-tab" class="tab-content active">
                <% if (plugin.is_builtin) { %>
                    <div class="info-box">
                        <h4><i class="fas fa-info-circle"></i> Built-in Plugin</h4>
                        <p>This is a built-in plugin. Some settings may be limited for security and stability reasons.</p>
                    </div>
                <% } %>

                <form id="settingsForm">
                    <div class="form-group">
                        <label class="form-label" for="settingsJson">Plugin Configuration (JSON)</label>
                        <div id="settingsJson" class="json-editor" contenteditable="true"><%= JSON.stringify(plugin.settings || {}, null, 2) %></div>
                        <div class="form-help">
                            Edit the plugin configuration in JSON format. Be careful with syntax as invalid JSON will not be saved.
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Settings
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="resetSettings()">
                            <i class="fas fa-undo"></i> Reset to Default
                        </button>
                    </div>
                </form>
            </div>

            <!-- Information Tab -->
            <div id="info-tab" class="tab-content">
                <div class="plugin-info">
                    <div class="info-item">
                        <div class="info-label">Plugin Name</div>
                        <div class="info-value"><%= plugin.name %></div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Version</div>
                        <div class="info-value"><%= plugin.version %></div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Author</div>
                        <div class="info-value"><%= plugin.author %></div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Status</div>
                        <div class="info-value">
                            <span class="status-indicator <%= plugin.is_active ? 'active' : plugin.has_error ? 'error' : 'inactive' %>"></span>
                            <%= plugin.is_active ? 'Active' : plugin.has_error ? 'Error' : 'Inactive' %>
                        </div>
                    </div>

                    <div class="info-item">
                        <div class="info-label">Type</div>
                        <div class="info-value"><%= plugin.is_builtin ? 'Built-in' : 'External' %></div>
                    </div>

                    <% if (plugin.loaded_at) { %>
                        <div class="info-item">
                            <div class="info-label">Last Loaded</div>
                            <div class="info-value"><%= new Date(plugin.loaded_at).toLocaleString() %></div>
                        </div>
                    <% } %>

                    <% if (plugin.created_at) { %>
                        <div class="info-item">
                            <div class="info-label">Created At</div>
                            <div class="info-value"><%= new Date(plugin.created_at).toLocaleString() %></div>
                        </div>
                    <% } %>

                    <% if (plugin.updated_at) { %>
                        <div class="info-item">
                            <div class="info-label">Last Updated</div>
                            <div class="info-value"><%= new Date(plugin.updated_at).toLocaleString() %></div>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Advanced Tab -->
            <div id="advanced-tab" class="tab-content">
                <% if (plugin.is_builtin) { %>
                    <div class="info-box">
                        <h4><i class="fas fa-shield-alt"></i> Built-in Plugin Protection</h4>
                        <p>Built-in plugins have restricted access to advanced operations for system stability and security.</p>
                    </div>
                <% } else { %>
                    <div class="info-box">
                        <h4><i class="fas fa-exclamation-triangle"></i> Advanced Operations</h4>
                        <p>These operations are for advanced users only. Incorrect usage may cause system instability.</p>
                    </div>

                    <div style="margin-top: 20px;">
                        <button class="btn btn-secondary" onclick="exportConfig()">
                            <i class="fas fa-download"></i> Export Configuration
                        </button>

                        <button class="btn btn-secondary" onclick="importConfig()">
                            <i class="fas fa-upload"></i> Import Configuration
                        </button>

                        <button class="btn btn-secondary" style="background: #dc3545;" onclick="clearCache()">
                            <i class="fas fa-trash"></i> Clear Cache
                        </button>
                    </div>
                <% } %>

                <div style="margin-top: 30px;">
                    <h4>Plugin Information</h4>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; font-family: monospace; font-size: 13px;">
                        <pre><%= JSON.stringify(plugin, null, 2) %></pre>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Logs Modal (reused from index page) -->
    <div id="logsModal" class="modal" style="display: none;">
        <div class="modal-content" style="max-width: 800px;">
            <div class="modal-header">
                <h3>Plugin Logs: <%= plugin.name %></h3>
                <button class="close-btn" onclick="closeLogsModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="logsContent" style="max-height: 400px; overflow-y: auto;">
                    <!-- Logs will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <script>
        let originalSettings = <%= JSON.stringify(plugin.settings || {}) %>;

        // Tab switching
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Remove active class from all buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');

            // Add active class to clicked button
            event.target.classList.add('active');
        }

        // Plugin management
        async function togglePlugin(activate) {
            try {
                const response = await fetch(`/plugins/api/plugins/<%= plugin.name %>/toggle`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ active: activate })
                });

                const result = await response.json();

                if (result.success) {
                    window.location.href = `/plugins/<%= plugin.name %>/settings?success=${encodeURIComponent(result.message)}`;
                } else {
                    window.location.href = `/plugins/<%= plugin.name %>/settings?error=${encodeURIComponent(result.message)}`;
                }
            } catch (error) {
                console.error('Error toggling plugin:', error);
                window.location.href = `/plugins/<%= plugin.name %>/settings?error=${encodeURIComponent('Failed to toggle plugin')}`;
            }
        }

        // Settings management
        document.getElementById('settingsForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            try {
                const settingsText = document.getElementById('settingsJson').textContent;
                let settings;

                try {
                    settings = JSON.parse(settingsText);
                } catch (parseError) {
                    alert('Invalid JSON format. Please check your syntax and try again.');
                    return;
                }

                const response = await fetch(`/plugins/api/plugins/<%= plugin.name %>/config`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(settings)
                });

                const result = await response.json();

                if (result.success) {
                    window.location.href = `/plugins/<%= plugin.name %>/settings?success=${encodeURIComponent(result.message)}`;
                } else {
                    alert('Error saving settings: ' + result.message);
                }
            } catch (error) {
                console.error('Error saving settings:', error);
                alert('Failed to save settings. Please try again.');
            }
        });

        function resetSettings() {
            if (confirm('Are you sure you want to reset to default settings? This cannot be undone.')) {
                document.getElementById('settingsJson').textContent = JSON.stringify(originalSettings, null, 2);
            }
        }

        // Logs functionality
        async function viewLogs() {
            try {
                document.getElementById('logsModal').style.display = 'block';
                document.getElementById('logsContent').innerHTML = '<p>Loading logs...</p>';

                const response = await fetch(`/plugins/api/plugins/<%= plugin.name %>/logs`);
                const result = await response.json();

                if (result.success && result.data.length > 0) {
                    let logsHtml = '';
                    result.data.forEach(log => {
                        const levelClass = log.level === 'error' ? 'text-danger' :
                                         log.level === 'warning' ? 'text-warning' :
                                         log.level === 'info' ? 'text-info' : 'text-secondary';

                        logsHtml += `
                            <div style="margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 6px;">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                    <span class="${levelClass}"><strong>${log.level.toUpperCase()}</strong></span>
                                    <small>${new Date(log.created_at).toLocaleString()}</small>
                                </div>
                                <div>${log.message}</div>
                                ${log.details ? `<pre style="margin: 10px 0 0 0; padding: 10px; background: #e9ecef; border-radius: 4px; font-size: 12px;">${JSON.stringify(log.details, null, 2)}</pre>` : ''}
                            </div>
                        `;
                    });
                    document.getElementById('logsContent').innerHTML = logsHtml;
                } else {
                    document.getElementById('logsContent').innerHTML = '<p>No logs found for this plugin.</p>';
                }
            } catch (error) {
                console.error('Error loading logs:', error);
                document.getElementById('logsContent').innerHTML = '<p class="text-danger">Error loading logs.</p>';
            }
        }

        function closeLogsModal() {
            document.getElementById('logsModal').style.display = 'none';
        }

        // Advanced operations
        function exportConfig() {
            const config = {
                name: '<%= plugin.name %>',
                settings: JSON.parse(document.getElementById('settingsJson').textContent),
                exported_at: new Date().toISOString()
            };

            const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${plugin.name}-config.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importConfig() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        try {
                            const config = JSON.parse(event.target.result);
                            if (config.settings) {
                                document.getElementById('settingsJson').textContent = JSON.stringify(config.settings, null, 2);
                            } else {
                                alert('Invalid configuration file format.');
                            }
                        } catch (error) {
                            alert('Error reading configuration file: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        function clearCache() {
            if (confirm('Are you sure you want to clear the plugin cache? This may temporarily affect plugin performance.')) {
                // Implementation would depend on the specific plugin
                alert('Cache cleared successfully. The plugin will be reloaded on next request.');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('logsModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Success/Error messages
        <% if (successMessage) { %>
            setTimeout(() => {
                alert('Success: <%= successMessage %>');
            }, 500);
        <% } %>

        <% if (errorMessage) { %>
            setTimeout(() => {
                alert('Error: <%= errorMessage %>');
            }, 500);
        <% } %>
    </script>
</body>
</html>