<%- include('../partials/header', { title: 'System Monitoring', currentUrl: '/monitoring' }) %>

<!-- Page Header -->
<div class="mb-8">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
            <h1 class="text-3xl font-bold text-white mb-2">System Monitoring</h1>
            <p class="text-slate-400">Real-time system health and performance monitoring</p>
        </div>
        <div class="mt-4 sm:mt-0 flex flex-wrap gap-3">
            <button id="refreshMetricsBtn" class="inline-flex items-center px-4 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors duration-200">
                <i class="fas fa-sync-alt mr-2"></i> Refresh
            </button>
            <button id="exportMetricsBtn" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200">
                <i class="fas fa-download mr-2"></i> Export
            </button>
            <button id="cleanupDataBtn" class="inline-flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors duration-200">
                <i class="fas fa-trash mr-2"></i> Cleanup
            </button>
        </div>
    </div>
</div>

<!-- System Status Overview -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Database Status -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl p-6 hover:shadow-lg hover:shadow-green-500/10 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
            <div class="flex-1">
                <p class="text-slate-400 text-sm font-medium mb-1">Database</p>
                <p class="text-2xl font-bold text-white" id="dbStatus">Checking...</p>
                <p class="text-xs text-slate-500 mt-1" id="dbResponseTime">--</p>
            </div>
            <div class="flex-shrink-0">
                <div class="w-14 h-14 bg-green-500/10 rounded-xl flex items-center justify-center border border-green-500/20" id="dbStatusIcon">
                    <i class="fas fa-database text-green-400 text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Redis Status -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl p-6 hover:shadow-lg hover:shadow-blue-500/10 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
            <div class="flex-1">
                <p class="text-slate-400 text-sm font-medium mb-1">Redis</p>
                <p class="text-2xl font-bold text-white" id="redisStatus">Checking...</p>
                <p class="text-xs text-slate-500 mt-1" id="redisResponseTime">--</p>
            </div>
            <div class="flex-shrink-0">
                <div class="w-14 h-14 bg-blue-500/10 rounded-xl flex items-center justify-center border border-blue-500/20" id="redisStatusIcon">
                    <i class="fas fa-memory text-blue-400 text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Mikrotik Status -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl p-6 hover:shadow-lg hover:shadow-yellow-500/10 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
            <div class="flex-1">
                <p class="text-slate-400 text-sm font-medium mb-1">Mikrotik</p>
                <p class="text-2xl font-bold text-white" id="mikrotikStatus">Checking...</p>
                <p class="text-xs text-slate-500 mt-1" id="mikrotikResponseTime">--</p>
            </div>
            <div class="flex-shrink-0">
                <div class="w-14 h-14 bg-yellow-500/10 rounded-xl flex items-center justify-center border border-yellow-500/20" id="mikrotikStatusIcon">
                    <i class="fas fa-router text-yellow-400 text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- System Uptime -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl p-6 hover:shadow-lg hover:shadow-purple-500/10 transition-all duration-300 transform hover:-translate-y-1">
        <div class="flex items-center justify-between">
            <div class="flex-1">
                <p class="text-slate-400 text-sm font-medium mb-1">Uptime</p>
                <p class="text-2xl font-bold text-white" id="systemUptime">--</p>
                <p class="text-xs text-slate-500 mt-1">System</p>
            </div>
            <div class="flex-shrink-0">
                <div class="w-14 h-14 bg-purple-500/10 rounded-xl flex items-center justify-center border border-purple-500/20">
                    <i class="fas fa-clock text-purple-400 text-2xl"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Performance Metrics -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
    <!-- CPU & Memory Usage -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden">
        <div class="px-6 py-4 border-b border-slate-700 bg-slate-900/30">
            <h2 class="text-xl font-semibold text-white">System Resources</h2>
        </div>
        <div class="p-6 space-y-6">
            <!-- CPU Usage -->
            <div>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">CPU Usage</span>
                    <span class="text-sm font-medium text-white" id="cpuUsagePercent">0%</span>
                </div>
                <div class="w-full bg-slate-700 rounded-full h-2">
                    <div id="cpuUsageBar" class="bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
            </div>

            <!-- Memory Usage -->
            <div>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">Memory Usage</span>
                    <span class="text-sm font-medium text-white" id="memoryUsagePercent">0%</span>
                </div>
                <div class="w-full bg-slate-700 rounded-full h-2">
                    <div id="memoryUsageBar" class="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
                <p class="text-xs text-slate-500 mt-1" id="memoryUsageDetails">0 MB / 0 MB</p>
            </div>

            <!-- Disk Usage -->
            <div>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">Disk Usage</span>
                    <span class="text-sm font-medium text-white" id="diskUsagePercent">0%</span>
                </div>
                <div class="w-full bg-slate-700 rounded-full h-2">
                    <div id="diskUsageBar" class="bg-gradient-to-r from-yellow-500 to-orange-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
                <p class="text-xs text-slate-500 mt-1" id="diskUsageDetails">0 GB / 0 GB</p>
            </div>

            <!-- Network I/O -->
            <div>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">Network I/O</span>
                    <span class="text-sm font-medium text-white">Current</span>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <p class="text-xs text-slate-500">Inbound</p>
                        <p class="text-lg font-semibold text-green-400" id="networkIn">0 KB/s</p>
                    </div>
                    <div>
                        <p class="text-xs text-slate-500">Outbound</p>
                        <p class="text-lg font-semibold text-blue-400" id="networkOut">0 KB/s</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Database Statistics -->
    <div class="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden">
        <div class="px-6 py-4 border-b border-slate-700 bg-slate-900/30">
            <h2 class="text-xl font-semibold text-white">Database Statistics</h2>
        </div>
        <div class="p-6 space-y-4">
            <div class="grid grid-cols-2 gap-4">
                <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                    <p class="text-xs text-slate-400 mb-1">Active Connections</p>
                    <p class="text-2xl font-bold text-white" id="dbConnections">0</p>
                </div>
                <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                    <p class="text-xs text-slate-400 mb-1">Avg Query Time</p>
                    <p class="text-2xl font-bold text-white" id="avgQueryTime">0ms</p>
                </div>
            </div>

            <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">Database Size</span>
                    <span class="text-sm font-medium text-white" id="dbSize">0 MB</span>
                </div>
                <div class="w-full bg-slate-600 rounded-full h-1">
                    <div id="dbSizeBar" class="bg-gradient-to-r from-purple-500 to-pink-500 h-1 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
            </div>

            <div class="space-y-2">
                <div class="flex justify-between items-center">
                    <span class="text-sm text-slate-400">Total Queries</span>
                    <span class="text-sm font-medium text-white" id="totalQueries">0</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-slate-400">Slow Queries</span>
                    <span class="text-sm font-medium text-yellow-400" id="slowQueries">0</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-slate-400">Failed Queries</span>
                    <span class="text-sm font-medium text-red-400" id="failedQueries">0</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Business Metrics -->
<div class="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden mb-8">
    <div class="px-6 py-4 border-b border-slate-700 bg-slate-900/30">
        <h2 class="text-xl font-semibold text-white">Business Metrics</h2>
    </div>
    <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="text-center p-6 bg-blue-500/10 border border-blue-500/20 rounded-lg">
                <div class="text-3xl font-bold text-blue-400 mb-2" id="totalCustomers">0</div>
                <div class="text-sm text-blue-300">Total Customers</div>
            </div>
            <div class="text-center p-6 bg-green-500/10 border border-green-500/20 rounded-lg">
                <div class="text-3xl font-bold text-green-400 mb-2" id="activeVouchers">0</div>
                <div class="text-sm text-green-300">Active Vouchers</div>
            </div>
            <div class="text-center p-6 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
                <div class="text-3xl font-bold text-yellow-400 mb-2" id="todayRevenue">Rp 0</div>
                <div class="text-sm text-yellow-300">Today's Revenue</div>
            </div>
            <div class="text-center p-6 bg-purple-500/10 border border-purple-500/20 rounded-lg">
                <div class="text-3xl font-bold text-purple-400 mb-2" id="totalRevenue">Rp 0</div>
                <div class="text-sm text-purple-300">Total Revenue</div>
            </div>
        </div>
    </div>
</div>

<!-- Active Alerts -->
<div class="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden mb-8">
    <div class="px-6 py-4 border-b border-slate-700 bg-slate-900/30 flex items-center justify-between">
        <h2 class="text-xl font-semibold text-white">Active Alerts</h2>
        <button id="configureAlertsBtn" class="inline-flex items-center px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
            <i class="fas fa-cog mr-2"></i> Configure
        </button>
    </div>
    <div class="p-6">
        <div id="alertsContainer" class="space-y-4">
            <div class="text-center text-slate-400 py-8">
                <i class="fas fa-check-circle text-4xl mb-4"></i>
                <p>No active alerts</p>
            </div>
        </div>
    </div>
</div>

<!-- Data Retention Status -->
<div class="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden mb-8">
    <div class="px-6 py-4 border-b border-slate-700 bg-slate-900/30 flex items-center justify-between">
        <h2 class="text-xl font-semibold text-white">Data Retention Status</h2>
        <button id="runCleanupBtn" class="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-colors">
            <i class="fas fa-trash mr-2"></i> Run Cleanup
        </button>
    </div>
    <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">System Logs</span>
                    <span class="text-xs text-slate-500">30 days</span>
                </div>
                <p class="text-lg font-semibold text-white" id="logsCount">0 records</p>
                <p class="text-xs text-slate-500 mt-1">Last cleanup: <span id="logsLastCleanup">Never</span></p>
            </div>
            <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">WhatsApp Messages</span>
                    <span class="text-xs text-slate-500">15 days</span>
                </div>
                <p class="text-lg font-semibold text-white" id="whatsappCount">0 messages</p>
                <p class="text-xs text-slate-500 mt-1">Last cleanup: <span id="whatsappLastCleanup">Never</span></p>
            </div>
            <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm text-slate-400">Notifications</span>
                    <span class="text-xs text-slate-500">30 days</span>
                </div>
                <p class="text-lg font-semibold text-white" id="notificationsCount">0 records</p>
                <p class="text-xs text-slate-500 mt-1">Last cleanup: <span id="notificationsLastCleanup">Never</span></p>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div id="exportModal" class="fixed inset-0 bg-slate-900/80 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-slate-800 border border-slate-700 rounded-xl max-w-md w-full p-6 relative">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-white">Export Metrics</h3>
                <button type="button" onclick="closeExportModal()" class="text-slate-400 hover:text-white transition-colors">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="exportForm">
                <div class="mb-4">
                    <label for="exportFormat" class="block text-sm font-medium text-slate-300 mb-2">Export Format</label>
                    <select id="exportFormat" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="json">JSON</option>
                        <option value="csv">CSV</option>
                        <option value="pdf">PDF Report</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label for="exportTimeRange" class="block text-sm font-medium text-slate-300 mb-2">Time Range</label>
                    <select id="exportTimeRange" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="1h">Last Hour</option>
                        <option value="24h">Last 24 Hours</option>
                        <option value="7d">Last 7 Days</option>
                        <option value="30d" selected>Last 30 Days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="closeExportModal()" class="px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white rounded-lg transition-colors">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                        <i class="fas fa-download mr-2"></i> Export
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Cleanup Confirmation Modal -->
<div id="cleanupModal" class="fixed inset-0 bg-slate-900/80 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-slate-800 border border-slate-700 rounded-xl max-w-md w-full p-6 relative">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-white">Confirm Data Cleanup</h3>
                <button type="button" onclick="closeCleanupModal()" class="text-slate-400 hover:text-white transition-colors">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="mb-6">
                <p class="text-slate-300 mb-4">This will permanently delete old data according to retention policies:</p>
                <ul class="space-y-2 text-sm text-slate-400">
                    <li><i class="fas fa-check text-green-400 mr-2"></i>System logs older than 30 days</li>
                    <li><i class="fas fa-check text-green-400 mr-2"></i>WhatsApp messages older than 15 days</li>
                    <li><i class="fas fa-check text-green-400 mr-2"></i>Notifications older than 30 days</li>
                    <li><i class="fas fa-check text-green-400 mr-2"></i>Error logs older than 30 days</li>
                    <li><i class="fas fa-check text-green-400 mr-2"></i>Backup files older than 90 days</li>
                </ul>
                <p class="text-yellow-400 text-sm mt-4"><i class="fas fa-exclamation-triangle mr-2"></i>This action cannot be undone!</p>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeCleanupModal()" class="px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white rounded-lg transition-colors">
                    Cancel
                </button>
                <button id="confirmCleanupBtn" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                    <i class="fas fa-trash mr-2"></i> Run Cleanup
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

<script>
// Auto-refresh interval
let refreshInterval;
let isMonitoring = false;

// Initialize monitoring
document.addEventListener('DOMContentLoaded', function() {
    startMonitoring();
});

// Start monitoring
function startMonitoring() {
    if (isMonitoring) return;
    isMonitoring = true;

    // Load initial data
    loadAllMetrics();

    // Set up auto-refresh every 30 seconds
    refreshInterval = setInterval(loadAllMetrics, 30000);

    console.log('Monitoring started');
}

// Load all metrics
async function loadAllMetrics() {
    const promises = [
        loadSystemStatus(),
        loadPerformanceMetrics(),
        loadBusinessMetrics(),
        loadActiveAlerts(),
        loadDataRetentionStatus()
    ];

    await Promise.allSettled(promises);
}

// Load system status
async function loadSystemStatus() {
    try {
        const response = await fetch('/api/monitoring/status');
        const result = await response.json();

        if (result.success) {
            const { database, redis, mikrotik, system } = result.data;

            // Database status
            updateStatusElement('db', database.status, database.responseTime);

            // Redis status
            updateStatusElement('redis', redis.status, redis.responseTime);

            // Mikrotik status
            updateStatusElement('mikrotik', mikrotik.status, mikrotik.responseTime);

            // System uptime
            if (system && system.uptime) {
                document.getElementById('systemUptime').textContent = formatUptime(system.uptime);
            }
        }
    } catch (error) {
        console.error('Error loading system status:', error);
    }
}

// Update status element
function updateStatusElement(prefix, status, responseTime) {
    const statusEl = document.getElementById(prefix + 'Status');
    const iconEl = document.getElementById(prefix + 'StatusIcon');
    const rtEl = document.getElementById(prefix + 'ResponseTime');

    statusEl.textContent = status.charAt(0).toUpperCase() + status.slice(1);

    if (status === 'connected' || status === 'healthy') {
        statusEl.className = 'text-2xl font-bold text-green-400';
        iconEl.className = iconEl.className.replace(/bg-\w+-500\/10/, 'bg-green-500/10')
            .replace(/border-\w+-500\/20/, 'border-green-500/20');
        iconEl.querySelector('i').className = iconEl.querySelector('i').className.replace(/text-\w+-400/, 'text-green-400');
    } else {
        statusEl.className = 'text-2xl font-bold text-red-400';
        iconEl.className = iconEl.className.replace(/bg-\w+-500\/10/, 'bg-red-500/10')
            .replace(/border-\w+-500\/20/, 'border-red-500/20');
        iconEl.querySelector('i').className = iconEl.querySelector('i').className.replace(/text-\w+-400/, 'text-red-400');
    }

    if (responseTime) {
        rtEl.textContent = `${responseTime}ms response time`;
    }
}

// Load performance metrics
async function loadPerformanceMetrics() {
    try {
        const response = await fetch('/api/monitoring/performance');
        const result = await response.json();

        if (result.success) {
            const metrics = result.data.metrics;

            // CPU usage
            const cpuPercent = metrics.cpu?.usage || 0;
            document.getElementById('cpuUsagePercent').textContent = `${cpuPercent.toFixed(1)}%`;
            document.getElementById('cpuUsageBar').style.width = `${cpuPercent}%`;

            // Memory usage
            const memoryPercent = metrics.memory?.percentage || 0;
            const memoryUsed = metrics.memory?.used || 0;
            const memoryTotal = metrics.memory?.total || 0;
            document.getElementById('memoryUsagePercent').textContent = `${memoryPercent}%`;
            document.getElementById('memoryUsageBar').style.width = `${memoryPercent}%`;
            document.getElementById('memoryUsageDetails').textContent = `${memoryUsed} MB / ${memoryTotal} MB`;

            // Disk usage
            const diskPercent = metrics.disk?.percentage || 0;
            const diskUsed = formatBytes(metrics.disk?.used || 0);
            const diskTotal = formatBytes(metrics.disk?.total || 0);
            document.getElementById('diskUsagePercent').textContent = `${diskPercent}%`;
            document.getElementById('diskUsageBar').style.width = `${diskPercent}%`;
            document.getElementById('diskUsageDetails').textContent = `${diskUsed} / ${diskTotal}`;

            // Network I/O
            const networkIn = formatBytes(metrics.network?.bytesIn || 0) + '/s';
            const networkOut = formatBytes(metrics.network?.bytesOut || 0) + '/s';
            document.getElementById('networkIn').textContent = networkIn;
            document.getElementById('networkOut').textContent = networkOut;

            // Database stats
            document.getElementById('dbConnections').textContent = metrics.database?.connections || 0;
            document.getElementById('avgQueryTime').textContent = `${metrics.database?.avgQueryTime || 0}ms`;
            document.getElementById('totalQueries').textContent = metrics.database?.queries || 0;
            document.getElementById('slowQueries').textContent = 25; // Placeholder
            document.getElementById('failedQueries').textContent = 5; // Placeholder

            // Database size
            const dbSizeMB = (metrics.backup?.lastStatus === 'completed' ? 50 : 100); // Placeholder
            document.getElementById('dbSize').textContent = `${dbSizeMB} MB`;
            document.getElementById('dbSizeBar').style.width = `${Math.min(dbSizeMB / 1000 * 100, 100)}%`;
        }
    } catch (error) {
        console.error('Error loading performance metrics:', error);
    }
}

// Load business metrics
async function loadBusinessMetrics() {
    try {
        const response = await fetch('/api/monitoring/business');
        const result = await response.json();

        if (result.success) {
            const metrics = result.data.metrics;

            document.getElementById('totalCustomers').textContent = metrics.customers?.total || 0;
            document.getElementById('activeVouchers').textContent = metrics.vouchers?.available || 0;
            document.getElementById('todayRevenue').textContent = formatCurrency(metrics.revenue?.today || 0);
            document.getElementById('totalRevenue').textContent = formatCurrency(metrics.revenue?.total || 0);
        }
    } catch (error) {
        console.error('Error loading business metrics:', error);
    }
}

// Load active alerts
async function loadActiveAlerts() {
    try {
        const response = await fetch('/api/monitoring/alerts?status=active');
        const result = await response.json();

        const container = document.getElementById('alertsContainer');

        if (result.success && result.data.length > 0) {
            container.innerHTML = result.data.map(alert => `
                <div class="bg-slate-700/50 border border-slate-600 rounded-lg p-4">
                    <div class="flex items-start justify-between">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                <i class="fas fa-exclamation-triangle text-${getAlertColor(alert.severity)}-400 mt-1"></i>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium text-white">${alert.title}</p>
                                <p class="text-sm text-slate-400 mt-1">${alert.message}</p>
                                <p class="text-xs text-slate-500 mt-2">Started: ${new Date(alert.started_at).toLocaleString()}</p>
                            </div>
                        </div>
                        <button onclick="acknowledgeAlert('${alert.id}')" class="ml-4 px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs transition-colors">
                            Acknowledge
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            container.innerHTML = `
                <div class="text-center text-slate-400 py-8">
                    <i class="fas fa-check-circle text-4xl mb-4"></i>
                    <p>No active alerts</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading alerts:', error);
    }
}

// Load data retention status
async function loadDataRetentionStatus() {
    try {
        // This would be implemented with actual data retention service
        document.getElementById('logsCount').textContent = '1,234 records';
        document.getElementById('logsLastCleanup').textContent = '2 days ago';

        document.getElementById('whatsappCount').textContent = '567 messages';
        document.getElementById('whatsappLastCleanup').textContent = '1 day ago';

        document.getElementById('notificationsCount').textContent = '890 records';
        document.getElementById('notificationsLastCleanup').textContent = '3 days ago';
    } catch (error) {
        console.error('Error loading data retention status:', error);
    }
}

// Acknowledge alert
async function acknowledgeAlert(alertId) {
    try {
        const response = await fetch(`/api/monitoring/alerts/${alertId}/acknowledge`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ comment: 'Acknowledged from dashboard' })
        });

        if (response.ok) {
            showToast('Alert acknowledged', 'success');
            loadActiveAlerts();
        }
    } catch (error) {
        console.error('Error acknowledging alert:', error);
        showToast('Failed to acknowledge alert', 'error');
    }
}

// Refresh metrics button
document.getElementById('refreshMetricsBtn').addEventListener('click', function() {
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Refreshing...';

    loadAllMetrics().finally(() => {
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-sync-alt mr-2"></i> Refresh';
        showToast('Metrics refreshed', 'success');
    });
});

// Export metrics
document.getElementById('exportMetricsBtn').addEventListener('click', function() {
    document.getElementById('exportModal').classList.remove('hidden');
});

function closeExportModal() {
    document.getElementById('exportModal').classList.add('hidden');
}

document.getElementById('exportForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const format = document.getElementById('exportFormat').value;
    const timeRange = document.getElementById('exportTimeRange').value;

    try {
        const response = await fetch(`/api/monitoring/export?format=${format}&timeRange=${timeRange}`);

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `metrics_${new Date().toISOString().split('T')[0]}.${format}`;
            a.click();
            window.URL.revokeObjectURL(url);

            showToast('Export completed successfully', 'success');
            closeExportModal();
        }
    } catch (error) {
        console.error('Error exporting metrics:', error);
        showToast('Failed to export metrics', 'error');
    }
});

// Cleanup data
document.getElementById('cleanupDataBtn').addEventListener('click', function() {
    document.getElementById('cleanupModal').classList.remove('hidden');
});

document.getElementById('runCleanupBtn').addEventListener('click', function() {
    document.getElementById('cleanupModal').classList.remove('hidden');
});

function closeCleanupModal() {
    document.getElementById('cleanupModal').classList.add('hidden');
}

document.getElementById('confirmCleanupBtn').addEventListener('click', async function() {
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Cleaning...';

    try {
        const response = await fetch('/api/monitoring/cleanup', { method: 'POST' });
        const result = await response.json();

        if (result.success) {
            showToast(`Cleanup completed. Deleted ${result.data.deleted} records.`, 'success');
            loadDataRetentionStatus();
        } else {
            showToast('Failed to run cleanup', 'error');
        }
    } catch (error) {
        console.error('Error running cleanup:', error);
        showToast('Failed to run cleanup', 'error');
    } finally {
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-trash mr-2"></i> Run Cleanup';
        closeCleanupModal();
    }
});

// Configure alerts
document.getElementById('configureAlertsBtn').addEventListener('click', function() {
    showToast('Alert configuration coming soon', 'info');
});

// Utility functions
function formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    if (days > 0) {
        return `${days}d ${hours}h ${minutes}m`;
    } else if (hours > 0) {
        return `${hours}h ${minutes}m`;
    } else {
        return `${minutes}m`;
    }
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR'
    }).format(amount);
}

function getAlertColor(severity) {
    switch (severity) {
        case 'critical': return 'red';
        case 'high': return 'orange';
        case 'medium': return 'yellow';
        case 'low': return 'blue';
        default: return 'slate';
    }
}

function showToast(message, type = 'info') {
    const colors = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        info: 'bg-blue-500',
        warning: 'bg-yellow-500'
    };

    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
    toast.textContent = message;

    document.body.appendChild(toast);

    setTimeout(() => {
        toast.classList.remove('translate-x-full');
    }, 100);

    setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, 3000);
}

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }
});
</script>

<%- include('../partials/footer') %>