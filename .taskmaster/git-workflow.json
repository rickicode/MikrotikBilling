{
  "version": "0.24.0",
  "createdAt": "2025-10-19T10:00:00.000Z",
  "project": "HIJINETWORK Mikrotik Billing System",
  "enforcement": {
    "commitFormatRequired": true,
    "agentAttributionRequired": true,
    "codeReviewRequired": true,
    "branchProtectionEnabled": true,
    "prRequiredForMerge": true
  },
  "commitFormat": {
    "pattern": "type(scope): description - @agent1 @agent2",
    "description": "Mandatory format for all commit messages in the Mikrotik Billing System",
    "examples": [
      "feat(vouchers): implement batch generation - @nodejs-expert @api-architect",
      "fix(mikrotik): resolve API connection timeout - @network-engineer @performance-optimizer",
      "feat(plugins): add DuitKu payment gateway - @payment-systems-expert @plugin-developer",
      "test(whatsapp): add multi-session E2E tests - @test-automation-expert @messaging-specialist",
      "docs(api): update Mikrotik integration guide - @documentation-specialist @network-engineer",
      "refactor(database): optimize query performance - @database-admin @performance-optimizer",
      "security(auth): strengthen JWT validation - @security-specialist @code-reviewer"
    ]
  },
  "commitTypes": {
    "feat": {
      "description": "New feature implementation",
      "requiresPr": true,
      "requiresTesting": true,
      "examples": [
        "feat(vouchers): add QR code support",
        "feat(payments): implement plugin architecture",
        "feat(whatsapp): multi-session management"
      ]
    },
    "fix": {
      "description": "Bug fixes and issue resolution",
      "requiresPr": true,
      "requiresTesting": true,
      "examples": [
        "fix(mikrotik): resolve connection pool exhaustion",
        "fix(vouchers): prevent duplicate generation",
        "fix(auth): resolve session timeout issue"
      ]
    },
    "refactor": {
      "description": "Code refactoring without functional changes",
      "requiresPr": true,
      "requiresTesting": false,
      "examples": [
        "refactor(services): extract common Mikrotik client",
        "refactor(middleware): simplify authentication flow",
        "refactor(templates): standardize EJS partials"
      ]
    },
    "test": {
      "description": "Testing improvements and new test cases",
      "requiresPr": true,
      "requiresTesting": false,
      "examples": [
        "test(vouchers): add integration test suite",
        "test(e2e): complete user registration flow",
        "test(performance): add database query benchmarks"
      ]
    },
    "docs": {
      "description": "Documentation updates and improvements",
      "requiresPr": false,
      "requiresTesting": false,
      "examples": [
        "docs(api): update voucher endpoints",
        "docs(deployment): add production setup guide",
        "docs(plugins): document payment gateway interface"
      ]
    },
    "style": {
      "description": "Code style and formatting changes",
      "requiresPr": false,
      "requiresTesting": false,
      "examples": [
        "style(css): fix responsive design issues",
        "style(js): standardize variable naming",
        "style(ejs): improve template indentation"
      ]
    },
    "perf": {
      "description": "Performance improvements and optimizations",
      "requiresPr": true,
      "requiresTesting": true,
      "examples": [
        "perf(database): add connection pooling",
        "perf(mikrotik): implement request caching",
        "perf(frontend): optimize bundle size"
      ]
    },
    "security": {
      "description": "Security enhancements and vulnerability fixes",
      "requiresPr": true,
      "requiresTesting": true,
      "examples": [
        "security(auth): implement rate limiting",
        "security(api): add input sanitization",
        "security(session): strengthen cookie security"
      ]
    },
    "chore": {
      "description": "Maintenance tasks and dependency updates",
      "requiresPr": false,
      "requiresTesting": false,
      "examples": [
        "chore(deps): update Fastify to v4.24.0",
        "chore(build): optimize webpack configuration",
        "chore(ci): add GitHub Actions workflow"
      ]
    }
  },
  "scopes": {
    "vouchers": {
      "description": "Voucher generation and management system",
      "primaryAgents": ["@nodejs-expert", "@api-architect", "@network-engineer"],
      "reviewers": ["@code-reviewer", "@security-specialist"]
    },
    "pppoe": {
      "description": "PPPoE user management system",
      "primaryAgents": ["@nodejs-expert", "@network-engineer", "@api-architect"],
      "reviewers": ["@code-reviewer", "@database-admin"]
    },
    "payments": {
      "description": "Payment processing and plugin system",
      "primaryAgents": ["@payment-systems-expert", "@plugin-developer", "@api-architect"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "whatsapp": {
      "description": "WhatsApp notification and messaging system",
      "primaryAgents": ["@messaging-specialist", "@network-engineer", "@frontend-optimization-expert"],
      "reviewers": ["@security-specialist", "@test-automation-expert"]
    },
    "mikrotik": {
      "description": "Mikrotik RouterOS API integration",
      "primaryAgents": ["@network-engineer", "@api-architect", "@performance-optimizer"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "database": {
      "description": "Database schema and migrations",
      "primaryAgents": ["@database-admin", "@performance-optimizer"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "auth": {
      "description": "Authentication and authorization system",
      "primaryAgents": ["@security-specialist", "@nodejs-expert"],
      "reviewers": ["@code-reviewer", "@api-architect"]
    },
    "frontend": {
      "description": "User interface and frontend components",
      "primaryAgents": ["@frontend-optimization-expert", "@code-reviewer"],
      "reviewers": ["@security-specialist", "@test-automation-expert"]
    },
    "plugins": {
      "description": "Plugin system and individual plugins",
      "primaryAgents": ["@plugin-developer", "@api-architect"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "testing": {
      "description": "Testing infrastructure and test cases",
      "primaryAgents": ["@test-automation-expert", "@testing-coordinator"],
      "reviewers": ["@code-reviewer", "@software-engineering-expert"]
    },
    "deployment": {
      "description": "Deployment configuration and DevOps",
      "primaryAgents": ["@devops-engineer", "@deployment-specialist"],
      "reviewers": ["@security-specialist", "@performance-optimizer"]
    },
    "backup": {
      "description": "Backup and restore system",
      "primaryAgents": ["@devops-engineer", "@database-admin"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "monitoring": {
      "description": "System monitoring and alerting",
      "primaryAgents": ["@devops-engineer", "@performance-optimizer"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    },
    "api": {
      "description": "General API endpoints and routes",
      "primaryAgents": ["@api-architect", "@nodejs-expert"],
      "reviewers": ["@security-specialist", "@code-reviewer"]
    }
  },
  "agentAssignment": {
    "automatic": true,
    "rules": {
      "backend_routes": ["@nodejs-expert", "@api-architect"],
      "database_operations": ["@database-admin", "@performance-optimizer"],
      "payment_features": ["@payment-systems-expert", "@plugin-developer"],
      "mikrotik_integration": ["@network-engineer", "@api-architect"],
      "whatsapp_features": ["@messaging-specialist", "@network-engineer"],
      "ui_components": ["@frontend-optimization-expert", "@code-reviewer"],
      "plugin_development": ["@plugin-developer", "@api-architect"],
      "testing_implementation": ["@test-automation-expert", "@testing-coordinator"],
      "security_features": ["@security-specialist", "@code-reviewer"],
      "deployment_tasks": ["@devops-engineer", "@deployment-specialist"]
    }
  },
  "branchProtection": {
    "main": {
      "protected": true,
      "requirePr": true,
      "requireUpToDate": true,
      "requireCodeReview": true,
      "requiredReviewers": 2,
      "dismissStaleReviews": true,
      "requireStatusChecks": true,
      "requiredStatusChecks": [
        "lint",
        "test:unit",
        "test:integration",
        "security-scan"
      ]
    },
    "develop": {
      "protected": true,
      "requirePr": false,
      "requireUpToDate": false,
      "requireCodeReview": true,
      "requiredReviewers": 1
    }
  },
  "pullRequestTemplates": {
    "feature_template": {
      "title": "feat(scope): brief description",
      "description": [
        "## Description",
        "Brief description of the feature being implemented.",
        "",
        "## Type of Change",
        "- [ ] Bug fix (non-breaking change which fixes an issue)",
        "- [x] New feature (non-breaking change which adds functionality)",
        "- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)",
        "- [ ] Documentation update",
        "",
        "## Testing",
        "- [x] Unit tests added/updated",
        "- [x] Integration tests added/updated",
        "- [x] E2E tests added/updated",
        "- [x] Manual testing completed",
        "",
        "## Checklist",
        "- [x] Code follows project style guidelines",
        "- [x] Self-review completed",
        "- [x] Documentation updated",
        "- [x] Security considerations addressed",
        "- [x] Performance impact considered"
      ]
    }
  },
  "preCommitHooks": {
    "enabled": true,
    "hooks": [
      {
        "name": "lint",
        "command": "npm run lint",
        "description": "Run ESLint to check code style"
      },
      {
        "name": "test:unit",
        "command": "npm run test:unit",
        "description": "Run unit tests"
      },
      {
        "name": "commit-msg",
        "command": "node scripts/validate-commit-message.js",
        "description": "Validate commit message format"
      }
    ]
  },
  "validation": {
    "commitMessage": {
      "pattern": "^(feat|fix|refactor|test|docs|style|perf|security|chore)\\([a-z-]+\\): .+ - @[a-z-]+( @[a-z-]+)?$",
      "errorMessage": "Commit message must follow format: type(scope): description - @agent1 @agent2"
    },
    "agentAttribution": {
      "required": true,
      "validAgents": [
        "@nodejs-expert", "@database-admin", "@api-architect", "@payment-systems-expert",
        "@messaging-specialist", "@network-engineer", "@plugin-developer", "@devops-engineer",
        "@performance-optimizer", "@test-automation-expert", "@testing-coordinator",
        "@security-specialist", "@frontend-optimization-expert", "@code-reviewer",
        "@software-engineering-expert", "@documentation-specialist", "@deployment-specialist"
      ]
    }
  },
  "automation": {
    "autoTagAgents": true,
    "suggestReviewers": true,
    "assignIssues": true,
    "linkToTasks": true,
    "generateChangelog": true
  }
}